
GLCD_Driver_Update.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000070a  00800060  000028bc  00002950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080076a  0080076a  0000305a  2**0
                  ALLOC
  3 .stab         0000225c  00000000  00000000  0000305c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000118a  00000000  00000000  000052b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006442  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000065e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000067d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b13c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 11 	call	0x23ec	; 0x23ec <main>
      8a:	0c 94 5c 14 	jmp	0x28b8	; 0x28b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 14 	jmp	0x2820	; 0x2820 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 00 14 	jmp	0x2800	; 0x2800 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 18 14 	jmp	0x2830	; 0x2830 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ed 57       	subi	r30, 0x7D	; 125
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GLCD_Get_Command>:
 *   Parameters    :  Command This constant Variable used to Carry The Command Data For LCD
 *   Return Value  : Void
 *   Remarks       : None
 * *********************************************************************************************/
void GLCD_Get_Command(const uint8 command)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	e9 97       	sbiw	r28, 0x39	; 57
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(PORT_COMMAND_BUS,RS_PIN,LOGIC_LOW);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a0 e8       	ldi	r26, 0x80	; 128
     e54:	bf e3       	ldi	r27, 0x3F	; 63
     e56:	8d ab       	std	Y+53, r24	; 0x35
     e58:	9e ab       	std	Y+54, r25	; 0x36
     e5a:	af ab       	std	Y+55, r26	; 0x37
     e5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	6d a9       	ldd	r22, Y+53	; 0x35
     e60:	7e a9       	ldd	r23, Y+54	; 0x36
     e62:	8f a9       	ldd	r24, Y+55	; 0x37
     e64:	98 ad       	ldd	r25, Y+56	; 0x38
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	4a e7       	ldi	r20, 0x7A	; 122
     e6c:	53 e4       	ldi	r21, 0x43	; 67
     e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	89 ab       	std	Y+49, r24	; 0x31
     e78:	9a ab       	std	Y+50, r25	; 0x32
     e7a:	ab ab       	std	Y+51, r26	; 0x33
     e7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e7e:	69 a9       	ldd	r22, Y+49	; 0x31
     e80:	7a a9       	ldd	r23, Y+50	; 0x32
     e82:	8b a9       	ldd	r24, Y+51	; 0x33
     e84:	9c a9       	ldd	r25, Y+52	; 0x34
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e92:	88 23       	and	r24, r24
     e94:	2c f4       	brge	.+10     	; 0xea0 <GLCD_Get_Command+0x72>
		__ticks = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	98 ab       	std	Y+48, r25	; 0x30
     e9c:	8f a7       	std	Y+47, r24	; 0x2f
     e9e:	3f c0       	rjmp	.+126    	; 0xf1e <GLCD_Get_Command+0xf0>
	else if (__tmp > 65535)
     ea0:	69 a9       	ldd	r22, Y+49	; 0x31
     ea2:	7a a9       	ldd	r23, Y+50	; 0x32
     ea4:	8b a9       	ldd	r24, Y+51	; 0x33
     ea6:	9c a9       	ldd	r25, Y+52	; 0x34
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb4:	18 16       	cp	r1, r24
     eb6:	4c f5       	brge	.+82     	; 0xf0a <GLCD_Get_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb8:	6d a9       	ldd	r22, Y+53	; 0x35
     eba:	7e a9       	ldd	r23, Y+54	; 0x36
     ebc:	8f a9       	ldd	r24, Y+55	; 0x37
     ebe:	98 ad       	ldd	r25, Y+56	; 0x38
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	98 ab       	std	Y+48, r25	; 0x30
     ede:	8f a7       	std	Y+47, r24	; 0x2f
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <GLCD_Get_Command+0xd2>
     ee2:	89 e1       	ldi	r24, 0x19	; 25
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9e a7       	std	Y+46, r25	; 0x2e
     ee8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eea:	8d a5       	ldd	r24, Y+45	; 0x2d
     eec:	9e a5       	ldd	r25, Y+46	; 0x2e
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <GLCD_Get_Command+0xc0>
     ef2:	9e a7       	std	Y+46, r25	; 0x2e
     ef4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef8:	98 a9       	ldd	r25, Y+48	; 0x30
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	98 ab       	std	Y+48, r25	; 0x30
     efe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	8f a5       	ldd	r24, Y+47	; 0x2f
     f02:	98 a9       	ldd	r25, Y+48	; 0x30
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	69 f7       	brne	.-38     	; 0xee2 <GLCD_Get_Command+0xb4>
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <GLCD_Get_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0a:	69 a9       	ldd	r22, Y+49	; 0x31
     f0c:	7a a9       	ldd	r23, Y+50	; 0x32
     f0e:	8b a9       	ldd	r24, Y+51	; 0x33
     f10:	9c a9       	ldd	r25, Y+52	; 0x34
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	8f a7       	std	Y+47, r24	; 0x2f
     f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f20:	98 a9       	ldd	r25, Y+48	; 0x30
     f22:	9c a7       	std	Y+44, r25	; 0x2c
     f24:	8b a7       	std	Y+43, r24	; 0x2b
     f26:	8b a5       	ldd	r24, Y+43	; 0x2b
     f28:	9c a5       	ldd	r25, Y+44	; 0x2c
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <GLCD_Get_Command+0xfc>
     f2e:	9c a7       	std	Y+44, r25	; 0x2c
     f30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(PORT_COMMAND_BUS,EN_PIN,LOGIC_HIGH);
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	63 e0       	ldi	r22, 0x03	; 3
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e8       	ldi	r26, 0x80	; 128
     f42:	bf e3       	ldi	r27, 0x3F	; 63
     f44:	8f a3       	std	Y+39, r24	; 0x27
     f46:	98 a7       	std	Y+40, r25	; 0x28
     f48:	a9 a7       	std	Y+41, r26	; 0x29
     f4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f4c:	6f a1       	ldd	r22, Y+39	; 0x27
     f4e:	78 a5       	ldd	r23, Y+40	; 0x28
     f50:	89 a5       	ldd	r24, Y+41	; 0x29
     f52:	9a a5       	ldd	r25, Y+42	; 0x2a
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	4a e7       	ldi	r20, 0x7A	; 122
     f5a:	53 e4       	ldi	r21, 0x43	; 67
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	8b a3       	std	Y+35, r24	; 0x23
     f66:	9c a3       	std	Y+36, r25	; 0x24
     f68:	ad a3       	std	Y+37, r26	; 0x25
     f6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f6c:	6b a1       	ldd	r22, Y+35	; 0x23
     f6e:	7c a1       	ldd	r23, Y+36	; 0x24
     f70:	8d a1       	ldd	r24, Y+37	; 0x25
     f72:	9e a1       	ldd	r25, Y+38	; 0x26
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e8       	ldi	r20, 0x80	; 128
     f7a:	5f e3       	ldi	r21, 0x3F	; 63
     f7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f80:	88 23       	and	r24, r24
     f82:	2c f4       	brge	.+10     	; 0xf8e <GLCD_Get_Command+0x160>
		__ticks = 1;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	9a a3       	std	Y+34, r25	; 0x22
     f8a:	89 a3       	std	Y+33, r24	; 0x21
     f8c:	3f c0       	rjmp	.+126    	; 0x100c <GLCD_Get_Command+0x1de>
	else if (__tmp > 65535)
     f8e:	6b a1       	ldd	r22, Y+35	; 0x23
     f90:	7c a1       	ldd	r23, Y+36	; 0x24
     f92:	8d a1       	ldd	r24, Y+37	; 0x25
     f94:	9e a1       	ldd	r25, Y+38	; 0x26
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	57 e4       	ldi	r21, 0x47	; 71
     f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	4c f5       	brge	.+82     	; 0xff8 <GLCD_Get_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa6:	6f a1       	ldd	r22, Y+39	; 0x27
     fa8:	78 a5       	ldd	r23, Y+40	; 0x28
     faa:	89 a5       	ldd	r24, Y+41	; 0x29
     fac:	9a a5       	ldd	r25, Y+42	; 0x2a
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e2       	ldi	r20, 0x20	; 32
     fb4:	51 e4       	ldi	r21, 0x41	; 65
     fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9a a3       	std	Y+34, r25	; 0x22
     fcc:	89 a3       	std	Y+33, r24	; 0x21
     fce:	0f c0       	rjmp	.+30     	; 0xfee <GLCD_Get_Command+0x1c0>
     fd0:	89 e1       	ldi	r24, 0x19	; 25
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	98 a3       	std	Y+32, r25	; 0x20
     fd6:	8f 8f       	std	Y+31, r24	; 0x1f
     fd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fda:	98 a1       	ldd	r25, Y+32	; 0x20
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	f1 f7       	brne	.-4      	; 0xfdc <GLCD_Get_Command+0x1ae>
     fe0:	98 a3       	std	Y+32, r25	; 0x20
     fe2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe4:	89 a1       	ldd	r24, Y+33	; 0x21
     fe6:	9a a1       	ldd	r25, Y+34	; 0x22
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	9a a3       	std	Y+34, r25	; 0x22
     fec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fee:	89 a1       	ldd	r24, Y+33	; 0x21
     ff0:	9a a1       	ldd	r25, Y+34	; 0x22
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	69 f7       	brne	.-38     	; 0xfd0 <GLCD_Get_Command+0x1a2>
     ff6:	14 c0       	rjmp	.+40     	; 0x1020 <GLCD_Get_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff8:	6b a1       	ldd	r22, Y+35	; 0x23
     ffa:	7c a1       	ldd	r23, Y+36	; 0x24
     ffc:	8d a1       	ldd	r24, Y+37	; 0x25
     ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	9a a3       	std	Y+34, r25	; 0x22
    100a:	89 a3       	std	Y+33, r24	; 0x21
    100c:	89 a1       	ldd	r24, Y+33	; 0x21
    100e:	9a a1       	ldd	r25, Y+34	; 0x22
    1010:	9e 8f       	std	Y+30, r25	; 0x1e
    1012:	8d 8f       	std	Y+29, r24	; 0x1d
    1014:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1016:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <GLCD_Get_Command+0x1ea>
    101c:	9e 8f       	std	Y+30, r25	; 0x1e
    101e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(PORT_DATA_BUS,command);
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	69 ad       	ldd	r22, Y+57	; 0x39
    1024:	0e 94 27 11 	call	0x224e	; 0x224e <GPIO_writePort>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e8       	ldi	r26, 0x80	; 128
    102e:	bf e3       	ldi	r27, 0x3F	; 63
    1030:	89 8f       	std	Y+25, r24	; 0x19
    1032:	9a 8f       	std	Y+26, r25	; 0x1a
    1034:	ab 8f       	std	Y+27, r26	; 0x1b
    1036:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1038:	69 8d       	ldd	r22, Y+25	; 0x19
    103a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    103e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	4a e7       	ldi	r20, 0x7A	; 122
    1046:	53 e4       	ldi	r21, 0x43	; 67
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8d 8b       	std	Y+21, r24	; 0x15
    1052:	9e 8b       	std	Y+22, r25	; 0x16
    1054:	af 8b       	std	Y+23, r26	; 0x17
    1056:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1058:	6d 89       	ldd	r22, Y+21	; 0x15
    105a:	7e 89       	ldd	r23, Y+22	; 0x16
    105c:	8f 89       	ldd	r24, Y+23	; 0x17
    105e:	98 8d       	ldd	r25, Y+24	; 0x18
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	2c f4       	brge	.+10     	; 0x107a <GLCD_Get_Command+0x24c>
		__ticks = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9c 8b       	std	Y+20, r25	; 0x14
    1076:	8b 8b       	std	Y+19, r24	; 0x13
    1078:	3f c0       	rjmp	.+126    	; 0x10f8 <GLCD_Get_Command+0x2ca>
	else if (__tmp > 65535)
    107a:	6d 89       	ldd	r22, Y+21	; 0x15
    107c:	7e 89       	ldd	r23, Y+22	; 0x16
    107e:	8f 89       	ldd	r24, Y+23	; 0x17
    1080:	98 8d       	ldd	r25, Y+24	; 0x18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	4c f5       	brge	.+82     	; 0x10e4 <GLCD_Get_Command+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	69 8d       	ldd	r22, Y+25	; 0x19
    1094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9c 8b       	std	Y+20, r25	; 0x14
    10b8:	8b 8b       	std	Y+19, r24	; 0x13
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <GLCD_Get_Command+0x2ac>
    10bc:	89 e1       	ldi	r24, 0x19	; 25
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9a 8b       	std	Y+18, r25	; 0x12
    10c2:	89 8b       	std	Y+17, r24	; 0x11
    10c4:	89 89       	ldd	r24, Y+17	; 0x11
    10c6:	9a 89       	ldd	r25, Y+18	; 0x12
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <GLCD_Get_Command+0x29a>
    10cc:	9a 8b       	std	Y+18, r25	; 0x12
    10ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d0:	8b 89       	ldd	r24, Y+19	; 0x13
    10d2:	9c 89       	ldd	r25, Y+20	; 0x14
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9c 8b       	std	Y+20, r25	; 0x14
    10d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10da:	8b 89       	ldd	r24, Y+19	; 0x13
    10dc:	9c 89       	ldd	r25, Y+20	; 0x14
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	69 f7       	brne	.-38     	; 0x10bc <GLCD_Get_Command+0x28e>
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <GLCD_Get_Command+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e4:	6d 89       	ldd	r22, Y+21	; 0x15
    10e6:	7e 89       	ldd	r23, Y+22	; 0x16
    10e8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ea:	98 8d       	ldd	r25, Y+24	; 0x18
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9c 8b       	std	Y+20, r25	; 0x14
    10f6:	8b 8b       	std	Y+19, r24	; 0x13
    10f8:	8b 89       	ldd	r24, Y+19	; 0x13
    10fa:	9c 89       	ldd	r25, Y+20	; 0x14
    10fc:	98 8b       	std	Y+16, r25	; 0x10
    10fe:	8f 87       	std	Y+15, r24	; 0x0f
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	98 89       	ldd	r25, Y+16	; 0x10
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <GLCD_Get_Command+0x2d6>
    1108:	98 8b       	std	Y+16, r25	; 0x10
    110a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(PORT_COMMAND_BUS,EN_PIN,LOGIC_LOW);
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	63 e0       	ldi	r22, 0x03	; 3
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a0 e8       	ldi	r26, 0x80	; 128
    111c:	bf e3       	ldi	r27, 0x3F	; 63
    111e:	8b 87       	std	Y+11, r24	; 0x0b
    1120:	9c 87       	std	Y+12, r25	; 0x0c
    1122:	ad 87       	std	Y+13, r26	; 0x0d
    1124:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1126:	6b 85       	ldd	r22, Y+11	; 0x0b
    1128:	7c 85       	ldd	r23, Y+12	; 0x0c
    112a:	8d 85       	ldd	r24, Y+13	; 0x0d
    112c:	9e 85       	ldd	r25, Y+14	; 0x0e
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	4a e7       	ldi	r20, 0x7A	; 122
    1134:	53 e4       	ldi	r21, 0x43	; 67
    1136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	8f 83       	std	Y+7, r24	; 0x07
    1140:	98 87       	std	Y+8, r25	; 0x08
    1142:	a9 87       	std	Y+9, r26	; 0x09
    1144:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1146:	6f 81       	ldd	r22, Y+7	; 0x07
    1148:	78 85       	ldd	r23, Y+8	; 0x08
    114a:	89 85       	ldd	r24, Y+9	; 0x09
    114c:	9a 85       	ldd	r25, Y+10	; 0x0a
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e8       	ldi	r20, 0x80	; 128
    1154:	5f e3       	ldi	r21, 0x3F	; 63
    1156:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    115a:	88 23       	and	r24, r24
    115c:	2c f4       	brge	.+10     	; 0x1168 <GLCD_Get_Command+0x33a>
		__ticks = 1;
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
    1166:	3f c0       	rjmp	.+126    	; 0x11e6 <GLCD_Get_Command+0x3b8>
	else if (__tmp > 65535)
    1168:	6f 81       	ldd	r22, Y+7	; 0x07
    116a:	78 85       	ldd	r23, Y+8	; 0x08
    116c:	89 85       	ldd	r24, Y+9	; 0x09
    116e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	57 e4       	ldi	r21, 0x47	; 71
    1178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    117c:	18 16       	cp	r1, r24
    117e:	4c f5       	brge	.+82     	; 0x11d2 <GLCD_Get_Command+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1180:	6b 85       	ldd	r22, Y+11	; 0x0b
    1182:	7c 85       	ldd	r23, Y+12	; 0x0c
    1184:	8d 85       	ldd	r24, Y+13	; 0x0d
    1186:	9e 85       	ldd	r25, Y+14	; 0x0e
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	40 e2       	ldi	r20, 0x20	; 32
    118e:	51 e4       	ldi	r21, 0x41	; 65
    1190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	9e 83       	std	Y+6, r25	; 0x06
    11a6:	8d 83       	std	Y+5, r24	; 0x05
    11a8:	0f c0       	rjmp	.+30     	; 0x11c8 <GLCD_Get_Command+0x39a>
    11aa:	89 e1       	ldi	r24, 0x19	; 25
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9c 83       	std	Y+4, r25	; 0x04
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <GLCD_Get_Command+0x388>
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	9e 83       	std	Y+6, r25	; 0x06
    11c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	69 f7       	brne	.-38     	; 0x11aa <GLCD_Get_Command+0x37c>
    11d0:	14 c0       	rjmp	.+40     	; 0x11fa <GLCD_Get_Command+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d2:	6f 81       	ldd	r22, Y+7	; 0x07
    11d4:	78 85       	ldd	r23, Y+8	; 0x08
    11d6:	89 85       	ldd	r24, Y+9	; 0x09
    11d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	9e 83       	std	Y+6, r25	; 0x06
    11e4:	8d 83       	std	Y+5, r24	; 0x05
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <GLCD_Get_Command+0x3c4>
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    11fa:	e9 96       	adiw	r28, 0x39	; 57
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <GLCD_Write_Data>:
 *   Parameters    :  Data This constant Variable used to Carry The Data that Needed To appear on LCD
 *   Return Value  : Void
 *   Remarks       : None
 * *********************************************************************************************/
void GLCD_Write_Data(const uint8 data)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	e9 97       	sbiw	r28, 0x39	; 57
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(PORT_COMMAND_BUS,RS_PIN,LOGIC_HIGH);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	62 e0       	ldi	r22, 0x02	; 2
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a0 e8       	ldi	r26, 0x80	; 128
    1232:	bf e3       	ldi	r27, 0x3F	; 63
    1234:	8d ab       	std	Y+53, r24	; 0x35
    1236:	9e ab       	std	Y+54, r25	; 0x36
    1238:	af ab       	std	Y+55, r26	; 0x37
    123a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    123c:	6d a9       	ldd	r22, Y+53	; 0x35
    123e:	7e a9       	ldd	r23, Y+54	; 0x36
    1240:	8f a9       	ldd	r24, Y+55	; 0x37
    1242:	98 ad       	ldd	r25, Y+56	; 0x38
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	4a e7       	ldi	r20, 0x7A	; 122
    124a:	53 e4       	ldi	r21, 0x43	; 67
    124c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	89 ab       	std	Y+49, r24	; 0x31
    1256:	9a ab       	std	Y+50, r25	; 0x32
    1258:	ab ab       	std	Y+51, r26	; 0x33
    125a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    125c:	69 a9       	ldd	r22, Y+49	; 0x31
    125e:	7a a9       	ldd	r23, Y+50	; 0x32
    1260:	8b a9       	ldd	r24, Y+51	; 0x33
    1262:	9c a9       	ldd	r25, Y+52	; 0x34
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f e3       	ldi	r21, 0x3F	; 63
    126c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1270:	88 23       	and	r24, r24
    1272:	2c f4       	brge	.+10     	; 0x127e <GLCD_Write_Data+0x72>
		__ticks = 1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	98 ab       	std	Y+48, r25	; 0x30
    127a:	8f a7       	std	Y+47, r24	; 0x2f
    127c:	3f c0       	rjmp	.+126    	; 0x12fc <GLCD_Write_Data+0xf0>
	else if (__tmp > 65535)
    127e:	69 a9       	ldd	r22, Y+49	; 0x31
    1280:	7a a9       	ldd	r23, Y+50	; 0x32
    1282:	8b a9       	ldd	r24, Y+51	; 0x33
    1284:	9c a9       	ldd	r25, Y+52	; 0x34
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	3f ef       	ldi	r19, 0xFF	; 255
    128a:	4f e7       	ldi	r20, 0x7F	; 127
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1292:	18 16       	cp	r1, r24
    1294:	4c f5       	brge	.+82     	; 0x12e8 <GLCD_Write_Data+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1296:	6d a9       	ldd	r22, Y+53	; 0x35
    1298:	7e a9       	ldd	r23, Y+54	; 0x36
    129a:	8f a9       	ldd	r24, Y+55	; 0x37
    129c:	98 ad       	ldd	r25, Y+56	; 0x38
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e2       	ldi	r20, 0x20	; 32
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	98 ab       	std	Y+48, r25	; 0x30
    12bc:	8f a7       	std	Y+47, r24	; 0x2f
    12be:	0f c0       	rjmp	.+30     	; 0x12de <GLCD_Write_Data+0xd2>
    12c0:	89 e1       	ldi	r24, 0x19	; 25
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	9e a7       	std	Y+46, r25	; 0x2e
    12c6:	8d a7       	std	Y+45, r24	; 0x2d
    12c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    12ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	f1 f7       	brne	.-4      	; 0x12cc <GLCD_Write_Data+0xc0>
    12d0:	9e a7       	std	Y+46, r25	; 0x2e
    12d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d6:	98 a9       	ldd	r25, Y+48	; 0x30
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	98 ab       	std	Y+48, r25	; 0x30
    12dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12de:	8f a5       	ldd	r24, Y+47	; 0x2f
    12e0:	98 a9       	ldd	r25, Y+48	; 0x30
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	69 f7       	brne	.-38     	; 0x12c0 <GLCD_Write_Data+0xb4>
    12e6:	14 c0       	rjmp	.+40     	; 0x1310 <GLCD_Write_Data+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e8:	69 a9       	ldd	r22, Y+49	; 0x31
    12ea:	7a a9       	ldd	r23, Y+50	; 0x32
    12ec:	8b a9       	ldd	r24, Y+51	; 0x33
    12ee:	9c a9       	ldd	r25, Y+52	; 0x34
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	98 ab       	std	Y+48, r25	; 0x30
    12fa:	8f a7       	std	Y+47, r24	; 0x2f
    12fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    12fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1300:	9c a7       	std	Y+44, r25	; 0x2c
    1302:	8b a7       	std	Y+43, r24	; 0x2b
    1304:	8b a5       	ldd	r24, Y+43	; 0x2b
    1306:	9c a5       	ldd	r25, Y+44	; 0x2c
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <GLCD_Write_Data+0xfc>
    130c:	9c a7       	std	Y+44, r25	; 0x2c
    130e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(PORT_COMMAND_BUS,EN_PIN,LOGIC_HIGH);
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a0 e8       	ldi	r26, 0x80	; 128
    1320:	bf e3       	ldi	r27, 0x3F	; 63
    1322:	8f a3       	std	Y+39, r24	; 0x27
    1324:	98 a7       	std	Y+40, r25	; 0x28
    1326:	a9 a7       	std	Y+41, r26	; 0x29
    1328:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    132a:	6f a1       	ldd	r22, Y+39	; 0x27
    132c:	78 a5       	ldd	r23, Y+40	; 0x28
    132e:	89 a5       	ldd	r24, Y+41	; 0x29
    1330:	9a a5       	ldd	r25, Y+42	; 0x2a
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	4a e7       	ldi	r20, 0x7A	; 122
    1338:	53 e4       	ldi	r21, 0x43	; 67
    133a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	8b a3       	std	Y+35, r24	; 0x23
    1344:	9c a3       	std	Y+36, r25	; 0x24
    1346:	ad a3       	std	Y+37, r26	; 0x25
    1348:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    134a:	6b a1       	ldd	r22, Y+35	; 0x23
    134c:	7c a1       	ldd	r23, Y+36	; 0x24
    134e:	8d a1       	ldd	r24, Y+37	; 0x25
    1350:	9e a1       	ldd	r25, Y+38	; 0x26
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e8       	ldi	r20, 0x80	; 128
    1358:	5f e3       	ldi	r21, 0x3F	; 63
    135a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    135e:	88 23       	and	r24, r24
    1360:	2c f4       	brge	.+10     	; 0x136c <GLCD_Write_Data+0x160>
		__ticks = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9a a3       	std	Y+34, r25	; 0x22
    1368:	89 a3       	std	Y+33, r24	; 0x21
    136a:	3f c0       	rjmp	.+126    	; 0x13ea <GLCD_Write_Data+0x1de>
	else if (__tmp > 65535)
    136c:	6b a1       	ldd	r22, Y+35	; 0x23
    136e:	7c a1       	ldd	r23, Y+36	; 0x24
    1370:	8d a1       	ldd	r24, Y+37	; 0x25
    1372:	9e a1       	ldd	r25, Y+38	; 0x26
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	3f ef       	ldi	r19, 0xFF	; 255
    1378:	4f e7       	ldi	r20, 0x7F	; 127
    137a:	57 e4       	ldi	r21, 0x47	; 71
    137c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1380:	18 16       	cp	r1, r24
    1382:	4c f5       	brge	.+82     	; 0x13d6 <GLCD_Write_Data+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1384:	6f a1       	ldd	r22, Y+39	; 0x27
    1386:	78 a5       	ldd	r23, Y+40	; 0x28
    1388:	89 a5       	ldd	r24, Y+41	; 0x29
    138a:	9a a5       	ldd	r25, Y+42	; 0x2a
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	40 e2       	ldi	r20, 0x20	; 32
    1392:	51 e4       	ldi	r21, 0x41	; 65
    1394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9a a3       	std	Y+34, r25	; 0x22
    13aa:	89 a3       	std	Y+33, r24	; 0x21
    13ac:	0f c0       	rjmp	.+30     	; 0x13cc <GLCD_Write_Data+0x1c0>
    13ae:	89 e1       	ldi	r24, 0x19	; 25
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	98 a3       	std	Y+32, r25	; 0x20
    13b4:	8f 8f       	std	Y+31, r24	; 0x1f
    13b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b8:	98 a1       	ldd	r25, Y+32	; 0x20
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <GLCD_Write_Data+0x1ae>
    13be:	98 a3       	std	Y+32, r25	; 0x20
    13c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c2:	89 a1       	ldd	r24, Y+33	; 0x21
    13c4:	9a a1       	ldd	r25, Y+34	; 0x22
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	9a a3       	std	Y+34, r25	; 0x22
    13ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13cc:	89 a1       	ldd	r24, Y+33	; 0x21
    13ce:	9a a1       	ldd	r25, Y+34	; 0x22
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	69 f7       	brne	.-38     	; 0x13ae <GLCD_Write_Data+0x1a2>
    13d4:	14 c0       	rjmp	.+40     	; 0x13fe <GLCD_Write_Data+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d6:	6b a1       	ldd	r22, Y+35	; 0x23
    13d8:	7c a1       	ldd	r23, Y+36	; 0x24
    13da:	8d a1       	ldd	r24, Y+37	; 0x25
    13dc:	9e a1       	ldd	r25, Y+38	; 0x26
    13de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	9a a3       	std	Y+34, r25	; 0x22
    13e8:	89 a3       	std	Y+33, r24	; 0x21
    13ea:	89 a1       	ldd	r24, Y+33	; 0x21
    13ec:	9a a1       	ldd	r25, Y+34	; 0x22
    13ee:	9e 8f       	std	Y+30, r25	; 0x1e
    13f0:	8d 8f       	std	Y+29, r24	; 0x1d
    13f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <GLCD_Write_Data+0x1ea>
    13fa:	9e 8f       	std	Y+30, r25	; 0x1e
    13fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(PORT_DATA_BUS,data);
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	69 ad       	ldd	r22, Y+57	; 0x39
    1402:	0e 94 27 11 	call	0x224e	; 0x224e <GPIO_writePort>
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e8       	ldi	r26, 0x80	; 128
    140c:	bf e3       	ldi	r27, 0x3F	; 63
    140e:	89 8f       	std	Y+25, r24	; 0x19
    1410:	9a 8f       	std	Y+26, r25	; 0x1a
    1412:	ab 8f       	std	Y+27, r26	; 0x1b
    1414:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	69 8d       	ldd	r22, Y+25	; 0x19
    1418:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	4a e7       	ldi	r20, 0x7A	; 122
    1424:	53 e4       	ldi	r21, 0x43	; 67
    1426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	8d 8b       	std	Y+21, r24	; 0x15
    1430:	9e 8b       	std	Y+22, r25	; 0x16
    1432:	af 8b       	std	Y+23, r26	; 0x17
    1434:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    144a:	88 23       	and	r24, r24
    144c:	2c f4       	brge	.+10     	; 0x1458 <GLCD_Write_Data+0x24c>
		__ticks = 1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	9c 8b       	std	Y+20, r25	; 0x14
    1454:	8b 8b       	std	Y+19, r24	; 0x13
    1456:	3f c0       	rjmp	.+126    	; 0x14d6 <GLCD_Write_Data+0x2ca>
	else if (__tmp > 65535)
    1458:	6d 89       	ldd	r22, Y+21	; 0x15
    145a:	7e 89       	ldd	r23, Y+22	; 0x16
    145c:	8f 89       	ldd	r24, Y+23	; 0x17
    145e:	98 8d       	ldd	r25, Y+24	; 0x18
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	3f ef       	ldi	r19, 0xFF	; 255
    1464:	4f e7       	ldi	r20, 0x7F	; 127
    1466:	57 e4       	ldi	r21, 0x47	; 71
    1468:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146c:	18 16       	cp	r1, r24
    146e:	4c f5       	brge	.+82     	; 0x14c2 <GLCD_Write_Data+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9c 8b       	std	Y+20, r25	; 0x14
    1496:	8b 8b       	std	Y+19, r24	; 0x13
    1498:	0f c0       	rjmp	.+30     	; 0x14b8 <GLCD_Write_Data+0x2ac>
    149a:	89 e1       	ldi	r24, 0x19	; 25
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9a 8b       	std	Y+18, r25	; 0x12
    14a0:	89 8b       	std	Y+17, r24	; 0x11
    14a2:	89 89       	ldd	r24, Y+17	; 0x11
    14a4:	9a 89       	ldd	r25, Y+18	; 0x12
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	f1 f7       	brne	.-4      	; 0x14a6 <GLCD_Write_Data+0x29a>
    14aa:	9a 8b       	std	Y+18, r25	; 0x12
    14ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9c 8b       	std	Y+20, r25	; 0x14
    14b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f7       	brne	.-38     	; 0x149a <GLCD_Write_Data+0x28e>
    14c0:	14 c0       	rjmp	.+40     	; 0x14ea <GLCD_Write_Data+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	6d 89       	ldd	r22, Y+21	; 0x15
    14c4:	7e 89       	ldd	r23, Y+22	; 0x16
    14c6:	8f 89       	ldd	r24, Y+23	; 0x17
    14c8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9c 8b       	std	Y+20, r25	; 0x14
    14d4:	8b 8b       	std	Y+19, r24	; 0x13
    14d6:	8b 89       	ldd	r24, Y+19	; 0x13
    14d8:	9c 89       	ldd	r25, Y+20	; 0x14
    14da:	98 8b       	std	Y+16, r25	; 0x10
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
    14de:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e0:	98 89       	ldd	r25, Y+16	; 0x10
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <GLCD_Write_Data+0x2d6>
    14e6:	98 8b       	std	Y+16, r25	; 0x10
    14e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(PORT_COMMAND_BUS,EN_PIN,LOGIC_LOW);
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	63 e0       	ldi	r22, 0x03	; 3
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 e8       	ldi	r26, 0x80	; 128
    14fa:	bf e3       	ldi	r27, 0x3F	; 63
    14fc:	8b 87       	std	Y+11, r24	; 0x0b
    14fe:	9c 87       	std	Y+12, r25	; 0x0c
    1500:	ad 87       	std	Y+13, r26	; 0x0d
    1502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1504:	6b 85       	ldd	r22, Y+11	; 0x0b
    1506:	7c 85       	ldd	r23, Y+12	; 0x0c
    1508:	8d 85       	ldd	r24, Y+13	; 0x0d
    150a:	9e 85       	ldd	r25, Y+14	; 0x0e
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a e7       	ldi	r20, 0x7A	; 122
    1512:	53 e4       	ldi	r21, 0x43	; 67
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8f 83       	std	Y+7, r24	; 0x07
    151e:	98 87       	std	Y+8, r25	; 0x08
    1520:	a9 87       	std	Y+9, r26	; 0x09
    1522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1524:	6f 81       	ldd	r22, Y+7	; 0x07
    1526:	78 85       	ldd	r23, Y+8	; 0x08
    1528:	89 85       	ldd	r24, Y+9	; 0x09
    152a:	9a 85       	ldd	r25, Y+10	; 0x0a
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	5f e3       	ldi	r21, 0x3F	; 63
    1534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1538:	88 23       	and	r24, r24
    153a:	2c f4       	brge	.+10     	; 0x1546 <GLCD_Write_Data+0x33a>
		__ticks = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	3f c0       	rjmp	.+126    	; 0x15c4 <GLCD_Write_Data+0x3b8>
	else if (__tmp > 65535)
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	4c f5       	brge	.+82     	; 0x15b0 <GLCD_Write_Data+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    155e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1560:	7c 85       	ldd	r23, Y+12	; 0x0c
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e2       	ldi	r20, 0x20	; 32
    156c:	51 e4       	ldi	r21, 0x41	; 65
    156e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	bc 01       	movw	r22, r24
    1578:	cd 01       	movw	r24, r26
    157a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <GLCD_Write_Data+0x39a>
    1588:	89 e1       	ldi	r24, 0x19	; 25
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	8b 83       	std	Y+3, r24	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	f1 f7       	brne	.-4      	; 0x1594 <GLCD_Write_Data+0x388>
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	69 f7       	brne	.-38     	; 0x1588 <GLCD_Write_Data+0x37c>
    15ae:	14 c0       	rjmp	.+40     	; 0x15d8 <GLCD_Write_Data+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9e 83       	std	Y+6, r25	; 0x06
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	9a 83       	std	Y+2, r25	; 0x02
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <GLCD_Write_Data+0x3c4>
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);


}
    15d8:	e9 96       	adiw	r28, 0x39	; 57
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <GLCD_Init>:
 *   Parameters    : void
 *   Return Value  : Void
 *   Remarks       : None
 * *********************************************************************************************/
void GLCD_Init()
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	2e 97       	sbiw	r28, 0x0e	; 14
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    GPIO_setupPortDirection(PORT_DATA_BUS,PORT_OUTPUT);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	6f ef       	ldi	r22, 0xFF	; 255
    1602:	0e 94 c6 10 	call	0x218c	; 0x218c <GPIO_setupPortDirection>
    GPIO_setupPortDirection(PORT_COMMAND_BUS,PORT_OUTPUT);
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	6f ef       	ldi	r22, 0xFF	; 255
    160a:	0e 94 c6 10 	call	0x218c	; 0x218c <GPIO_setupPortDirection>
    GLCD_PageSelect(Left_Page);
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	0e 94 ba 0c 	call	0x1974	; 0x1974 <GLCD_PageSelect>
    GPIO_writePin(PORT_COMMAND_BUS,RESET_PIN,LOGIC_HIGH);
    1614:	82 e0       	ldi	r24, 0x02	; 2
    1616:	64 e0       	ldi	r22, 0x04	; 4
    1618:	41 e0       	ldi	r20, 0x01	; 1
    161a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 ea       	ldi	r26, 0xA0	; 160
    1624:	b1 e4       	ldi	r27, 0x41	; 65
    1626:	8b 87       	std	Y+11, r24	; 0x0b
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	ad 87       	std	Y+13, r26	; 0x0d
    162c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	53 e4       	ldi	r21, 0x43	; 67
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	98 87       	std	Y+8, r25	; 0x08
    164a:	a9 87       	std	Y+9, r26	; 0x09
    164c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <GLCD_Init+0x86>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <GLCD_Init+0x104>
	else if (__tmp > 65535)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <GLCD_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <GLCD_Init+0xe6>
    16b2:	89 e1       	ldi	r24, 0x19	; 25
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <GLCD_Init+0xd4>
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <GLCD_Init+0xc8>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <GLCD_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <GLCD_Init+0x110>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20);
    GLCD_Get_Command(DISPLAY_OFF);
    1702:	8e e3       	ldi	r24, 0x3E	; 62
    1704:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
    GLCD_Get_Command(Y_FIRST_ADDRESS);
    1708:	80 e4       	ldi	r24, 0x40	; 64
    170a:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
    GLCD_Get_Command(X_FIRST_ADDRESS);
    170e:	88 eb       	ldi	r24, 0xB8	; 184
    1710:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
    GLCD_Get_Command(Z_FIRST_ADDRESS);
    1714:	80 ec       	ldi	r24, 0xC0	; 192
    1716:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
    GLCD_Get_Command(DISPLAY_ON);
    171a:	8f e3       	ldi	r24, 0x3F	; 63
    171c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
}
    1720:	2e 96       	adiw	r28, 0x0e	; 14
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <GLCD_Clear_Display>:
 *   Parameters    : void
 *   Return Value  : Void
 *   Remarks       : None
 * *********************************************************************************************/
void GLCD_Clear_Display()
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	00 d0       	rcall	.+0      	; 0x1738 <GLCD_Clear_Display+0x6>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
	uint8 i=0;
    173c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 j=0;
    173e:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_LOW);
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
	GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_LOW);
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
	for (i=0;i<8;i++)
    1754:	1a 82       	std	Y+2, r1	; 0x02
    1756:	12 c0       	rjmp	.+36     	; 0x177c <GLCD_Clear_Display+0x4a>
	{
		GLCD_Get_Command((X_FIRST_ADDRESS)+i);
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	88 54       	subi	r24, 0x48	; 72
    175c:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
		for (j=0;j<64;j++)
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <GLCD_Clear_Display+0x3e>
		{
			GLCD_Write_Data(clear_lcd);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	0e 94 06 09 	call	0x120c	; 0x120c <GLCD_Write_Data>
	GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_LOW);
	GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_LOW);
	for (i=0;i<8;i++)
	{
		GLCD_Get_Command((X_FIRST_ADDRESS)+i);
		for (j=0;j<64;j++)
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	80 34       	cpi	r24, 0x40	; 64
    1774:	b8 f3       	brcs	.-18     	; 0x1764 <GLCD_Clear_Display+0x32>
{
	uint8 i=0;
	uint8 j=0;
	GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_LOW);
	GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_LOW);
	for (i=0;i<8;i++)
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	8f 5f       	subi	r24, 0xFF	; 255
    177a:	8a 83       	std	Y+2, r24	; 0x02
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	88 30       	cpi	r24, 0x08	; 8
    1780:	58 f3       	brcs	.-42     	; 0x1758 <GLCD_Clear_Display+0x26>
			GLCD_Write_Data(clear_lcd);
		}

	}

	GLCD_Get_Command(Y_FIRST_ADDRESS);
    1782:	80 e4       	ldi	r24, 0x40	; 64
    1784:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
	GLCD_Get_Command(X_FIRST_ADDRESS);
    1788:	88 eb       	ldi	r24, 0xB8	; 184
    178a:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>

}
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <Set_Cursor>:
 *   Parameters    : x , y variables Are Used To Set The Location in LCD
 *   Return Value  : Void
 *   Remarks       : Follow The DataSheet Registers
 * *********************************************************************************************/
void Set_Cursor(uint8 x, uint8 y)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	60 97       	sbiw	r28, 0x10	; 16
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
    17ae:	68 8b       	std	Y+16, r22	; 0x10

	GLCD_Get_Command((X_FIRST_ADDRESS&0xF8) | (x & 0x07));
    17b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b2:	87 70       	andi	r24, 0x07	; 7
    17b4:	88 6b       	ori	r24, 0xB8	; 184
    17b6:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a0 e8       	ldi	r26, 0x80	; 128
    17c0:	bf e3       	ldi	r27, 0x3F	; 63
    17c2:	8b 87       	std	Y+11, r24	; 0x0b
    17c4:	9c 87       	std	Y+12, r25	; 0x0c
    17c6:	ad 87       	std	Y+13, r26	; 0x0d
    17c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    17cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4a e7       	ldi	r20, 0x7A	; 122
    17d8:	53 e4       	ldi	r21, 0x43	; 67
    17da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	8f 83       	std	Y+7, r24	; 0x07
    17e4:	98 87       	std	Y+8, r25	; 0x08
    17e6:	a9 87       	std	Y+9, r26	; 0x09
    17e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17ea:	6f 81       	ldd	r22, Y+7	; 0x07
    17ec:	78 85       	ldd	r23, Y+8	; 0x08
    17ee:	89 85       	ldd	r24, Y+9	; 0x09
    17f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e8       	ldi	r20, 0x80	; 128
    17f8:	5f e3       	ldi	r21, 0x3F	; 63
    17fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fe:	88 23       	and	r24, r24
    1800:	2c f4       	brge	.+10     	; 0x180c <Set_Cursor+0x74>
		__ticks = 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	3f c0       	rjmp	.+126    	; 0x188a <Set_Cursor+0xf2>
	else if (__tmp > 65535)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	3f ef       	ldi	r19, 0xFF	; 255
    1818:	4f e7       	ldi	r20, 0x7F	; 127
    181a:	57 e4       	ldi	r21, 0x47	; 71
    181c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1820:	18 16       	cp	r1, r24
    1822:	4c f5       	brge	.+82     	; 0x1876 <Set_Cursor+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1824:	6b 85       	ldd	r22, Y+11	; 0x0b
    1826:	7c 85       	ldd	r23, Y+12	; 0x0c
    1828:	8d 85       	ldd	r24, Y+13	; 0x0d
    182a:	9e 85       	ldd	r25, Y+14	; 0x0e
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
    184c:	0f c0       	rjmp	.+30     	; 0x186c <Set_Cursor+0xd4>
    184e:	89 e1       	ldi	r24, 0x19	; 25
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	9c 83       	std	Y+4, r25	; 0x04
    1854:	8b 83       	std	Y+3, r24	; 0x03
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <Set_Cursor+0xc2>
    185e:	9c 83       	std	Y+4, r25	; 0x04
    1860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	9e 81       	ldd	r25, Y+6	; 0x06
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	9e 81       	ldd	r25, Y+6	; 0x06
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	69 f7       	brne	.-38     	; 0x184e <Set_Cursor+0xb6>
    1874:	14 c0       	rjmp	.+40     	; 0x189e <Set_Cursor+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1876:	6f 81       	ldd	r22, Y+7	; 0x07
    1878:	78 85       	ldd	r23, Y+8	; 0x08
    187a:	89 85       	ldd	r24, Y+9	; 0x09
    187c:	9a 85       	ldd	r25, Y+10	; 0x0a
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <Set_Cursor+0xfe>
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
    GLCD_Get_Command((Y_FIRST_ADDRESS&0xC0) | (y & 0x3E));
    189e:	88 89       	ldd	r24, Y+16	; 0x10
    18a0:	8e 73       	andi	r24, 0x3E	; 62
    18a2:	80 64       	ori	r24, 0x40	; 64
    18a4:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>

}
    18a8:	60 96       	adiw	r28, 0x10	; 16
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <glcd_writeChar>:
 *   Return Value  : Void
 *   Remarks       : The Charcheters In The Graphical LCD Is Drawn According To An Array Because
 *                   All Charchters Drawn In LCD Are 5*7 Font Not 8*8 As Normal LCD
 * *********************************************************************************************/
void glcd_writeChar(char * chr,Page_Num_Select page)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <glcd_writeChar+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <glcd_writeChar+0x8>
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    18cc:	19 82       	std	Y+1, r1	; 0x01
	GLCD_PageSelect(page);
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <GLCD_PageSelect>
	for(i=0;i<5;i++)
    18d4:	19 82       	std	Y+1, r1	; 0x01
    18d6:	0e c0       	rjmp	.+28     	; 0x18f4 <glcd_writeChar+0x3a>
	{
		GLCD_Write_Data(*(chr+i));
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	fc 01       	movw	r30, r24
    18e4:	e2 0f       	add	r30, r18
    18e6:	f3 1f       	adc	r31, r19
    18e8:	80 81       	ld	r24, Z
    18ea:	0e 94 06 09 	call	0x120c	; 0x120c <GLCD_Write_Data>
 * *********************************************************************************************/
void glcd_writeChar(char * chr,Page_Num_Select page)
{
	uint8 i=0;
	GLCD_PageSelect(page);
	for(i=0;i<5;i++)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	85 30       	cpi	r24, 0x05	; 5
    18f8:	78 f3       	brcs	.-34     	; 0x18d8 <glcd_writeChar+0x1e>
	{
		GLCD_Write_Data(*(chr+i));
	}
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <glcd_writeStr>:
 *   Parameters    : Pointer To Array Each Array Consist of Number ( N ) : N here is The Number of Element Per Each Array
 *   Return Value  : Void
 *   Remarks       : None
 * *********************************************************************************************/
void glcd_writeStr( char (*ptr)[5])
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	00 d0       	rcall	.+0      	; 0x190e <glcd_writeStr+0x6>
    190e:	00 d0       	rcall	.+0      	; 0x1910 <glcd_writeStr+0x8>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	9c 83       	std	Y+4, r25	; 0x04
    1916:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i ,j;
	for(i=0;i<5;i++)
    1918:	1a 82       	std	Y+2, r1	; 0x02
    191a:	22 c0       	rjmp	.+68     	; 0x1960 <glcd_writeStr+0x58>
	{
		for(j=0;j<5;j++)
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	1a c0       	rjmp	.+52     	; 0x1954 <glcd_writeStr+0x4c>
		{
			GLCD_Write_Data(*(ptr[i]+j));
    1920:	4b 81       	ldd	r20, Y+3	; 0x03
    1922:	5c 81       	ldd	r21, Y+4	; 0x04
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	c9 01       	movw	r24, r18
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	28 0f       	add	r18, r24
    1936:	39 1f       	adc	r19, r25
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	82 0f       	add	r24, r18
    1940:	93 1f       	adc	r25, r19
    1942:	fa 01       	movw	r30, r20
    1944:	e8 0f       	add	r30, r24
    1946:	f9 1f       	adc	r31, r25
    1948:	80 81       	ld	r24, Z
    194a:	0e 94 06 09 	call	0x120c	; 0x120c <GLCD_Write_Data>
void glcd_writeStr( char (*ptr)[5])
{
	uint8 i ,j;
	for(i=0;i<5;i++)
	{
		for(j=0;j<5;j++)
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	8f 5f       	subi	r24, 0xFF	; 255
    1952:	89 83       	std	Y+1, r24	; 0x01
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	85 30       	cpi	r24, 0x05	; 5
    1958:	18 f3       	brcs	.-58     	; 0x1920 <glcd_writeStr+0x18>
 *   Remarks       : None
 * *********************************************************************************************/
void glcd_writeStr( char (*ptr)[5])
{
	uint8 i ,j;
	for(i=0;i<5;i++)
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	8a 83       	std	Y+2, r24	; 0x02
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	85 30       	cpi	r24, 0x05	; 5
    1964:	d8 f2       	brcs	.-74     	; 0x191c <glcd_writeStr+0x14>
		for(j=0;j<5;j++)
		{
			GLCD_Write_Data(*(ptr[i]+j));
		}
	}
}
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <GLCD_PageSelect>:
 *   Parameters    : Page Is Variable From User Defined Data Type Enum To Select Page
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/
void GLCD_PageSelect(Page_Num_Select page)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <GLCD_PageSelect+0x6>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	89 83       	std	Y+1, r24	; 0x01
	switch (page)
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	3b 83       	std	Y+3, r19	; 0x03
    198a:	2a 83       	std	Y+2, r18	; 0x02
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	9b 81       	ldd	r25, Y+3	; 0x03
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	91 05       	cpc	r25, r1
    1994:	a1 f0       	breq	.+40     	; 0x19be <GLCD_PageSelect+0x4a>
    1996:	2a 81       	ldd	r18, Y+2	; 0x02
    1998:	3b 81       	ldd	r19, Y+3	; 0x03
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	d1 f0       	breq	.+52     	; 0x19d4 <GLCD_PageSelect+0x60>
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	9b 81       	ldd	r25, Y+3	; 0x03
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	09 f5       	brne	.+66     	; 0x19ea <GLCD_PageSelect+0x76>
	{
	case Left_Page:
		GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_LOW);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_HIGH);
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	61 e0       	ldi	r22, 0x01	; 1
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    19bc:	20 c0       	rjmp	.+64     	; 0x19fe <GLCD_PageSelect+0x8a>
		break;
	case Right_Page:
		GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_HIGH);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_LOW);
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    19d2:	15 c0       	rjmp	.+42     	; 0x19fe <GLCD_PageSelect+0x8a>
		break;
	case both_pages:
		GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_LOW);
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	60 e0       	ldi	r22, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_LOW);
    19de:	82 e0       	ldi	r24, 0x02	; 2
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
    19e8:	0a c0       	rjmp	.+20     	; 0x19fe <GLCD_PageSelect+0x8a>
		break;

	default :
		GPIO_writePin(PORT_COMMAND_BUS,LEFT_SEGMENT_PIN,LOGIC_LOW);
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
		GPIO_writePin(PORT_COMMAND_BUS,RIGHT_SEGMENT_PIN,LOGIC_HIGH);
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <GPIO_writePin>
	}
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <GLCD_wString>:
 *
 *    will increment * str till Null And exit the loop
 *
 **********************************************************************************************/
void GLCD_wString(uint8 *str,Page_Num_Select page)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	67 97       	sbiw	r28, 0x17	; 23
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	9e 8b       	std	Y+22, r25	; 0x16
    1a20:	8d 8b       	std	Y+21, r24	; 0x15
    1a22:	6f 8b       	std	Y+23, r22	; 0x17
	uint16 i=0;
    1a24:	1c 8a       	std	Y+20, r1	; 0x14
    1a26:	1b 8a       	std	Y+19, r1	; 0x13
	GLCD_PageSelect(page);
    1a28:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <GLCD_PageSelect>
	uint16 startfont=0,endfont=0;
    1a2e:	1a 8a       	std	Y+18, r1	; 0x12
    1a30:	19 8a       	std	Y+17, r1	; 0x11
    1a32:	18 8a       	std	Y+16, r1	; 0x10
    1a34:	1f 86       	std	Y+15, r1	; 0x0f
    1a36:	a6 c0       	rjmp	.+332    	; 0x1b84 <GLCD_wString+0x17a>
	while (*str)
	{
		startfont=(*str-32)*5;
    1a38:	ed 89       	ldd	r30, Y+21	; 0x15
    1a3a:	fe 89       	ldd	r31, Y+22	; 0x16
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	c9 01       	movw	r24, r18
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	82 0f       	add	r24, r18
    1a4e:	93 1f       	adc	r25, r19
    1a50:	80 5a       	subi	r24, 0xA0	; 160
    1a52:	90 40       	sbci	r25, 0x00	; 0
    1a54:	9a 8b       	std	Y+18, r25	; 0x12
    1a56:	89 8b       	std	Y+17, r24	; 0x11
		endfont=startfont + 5;
    1a58:	89 89       	ldd	r24, Y+17	; 0x11
    1a5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5c:	05 96       	adiw	r24, 0x05	; 5
    1a5e:	98 8b       	std	Y+16, r25	; 0x10
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
		for (i=startfont;i<endfont;i++)
    1a62:	89 89       	ldd	r24, Y+17	; 0x11
    1a64:	9a 89       	ldd	r25, Y+18	; 0x12
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	7f c0       	rjmp	.+254    	; 0x1b6a <GLCD_wString+0x160>
		{
			GLCD_Write_Data(sys5x7[i]);
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	fc 01       	movw	r30, r24
    1a72:	ed 57       	subi	r30, 0x7D	; 125
    1a74:	fe 4f       	sbci	r31, 0xFE	; 254
    1a76:	80 81       	ld	r24, Z
    1a78:	0e 94 06 09 	call	0x120c	; 0x120c <GLCD_Write_Data>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e2       	ldi	r26, 0x20	; 32
    1a82:	b1 e4       	ldi	r27, 0x41	; 65
    1a84:	8b 87       	std	Y+11, r24	; 0x0b
    1a86:	9c 87       	std	Y+12, r25	; 0x0c
    1a88:	ad 87       	std	Y+13, r26	; 0x0d
    1a8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	4a e7       	ldi	r20, 0x7A	; 122
    1a9a:	53 e4       	ldi	r21, 0x43	; 67
    1a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	8f 83       	std	Y+7, r24	; 0x07
    1aa6:	98 87       	std	Y+8, r25	; 0x08
    1aa8:	a9 87       	std	Y+9, r26	; 0x09
    1aaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	2c f4       	brge	.+10     	; 0x1ace <GLCD_wString+0xc4>
		__ticks = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	3f c0       	rjmp	.+126    	; 0x1b4c <GLCD_wString+0x142>
	else if (__tmp > 65535)
    1ace:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad0:	78 85       	ldd	r23, Y+8	; 0x08
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	3f ef       	ldi	r19, 0xFF	; 255
    1ada:	4f e7       	ldi	r20, 0x7F	; 127
    1adc:	57 e4       	ldi	r21, 0x47	; 71
    1ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae2:	18 16       	cp	r1, r24
    1ae4:	4c f5       	brge	.+82     	; 0x1b38 <GLCD_wString+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e2       	ldi	r20, 0x20	; 32
    1af4:	51 e4       	ldi	r21, 0x41	; 65
    1af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	0f c0       	rjmp	.+30     	; 0x1b2e <GLCD_wString+0x124>
    1b10:	89 e1       	ldi	r24, 0x19	; 25
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	9c 83       	std	Y+4, r25	; 0x04
    1b16:	8b 83       	std	Y+3, r24	; 0x03
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	01 97       	sbiw	r24, 0x01	; 1
    1b1e:	f1 f7       	brne	.-4      	; 0x1b1c <GLCD_wString+0x112>
    1b20:	9c 83       	std	Y+4, r25	; 0x04
    1b22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b30:	9e 81       	ldd	r25, Y+6	; 0x06
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	69 f7       	brne	.-38     	; 0x1b10 <GLCD_wString+0x106>
    1b36:	14 c0       	rjmp	.+40     	; 0x1b60 <GLCD_wString+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b38:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3a:	78 85       	ldd	r23, Y+8	; 0x08
    1b3c:	89 85       	ldd	r24, Y+9	; 0x09
    1b3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	9a 83       	std	Y+2, r25	; 0x02
    1b52:	89 83       	std	Y+1, r24	; 0x01
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	9a 81       	ldd	r25, Y+2	; 0x02
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <GLCD_wString+0x14e>
    1b5c:	9a 83       	std	Y+2, r25	; 0x02
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	uint16 startfont=0,endfont=0;
	while (*str)
	{
		startfont=(*str-32)*5;
		endfont=startfont + 5;
		for (i=startfont;i<endfont;i++)
    1b60:	8b 89       	ldd	r24, Y+19	; 0x13
    1b62:	9c 89       	ldd	r25, Y+20	; 0x14
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	9c 8b       	std	Y+20, r25	; 0x14
    1b68:	8b 8b       	std	Y+19, r24	; 0x13
    1b6a:	2b 89       	ldd	r18, Y+19	; 0x13
    1b6c:	3c 89       	ldd	r19, Y+20	; 0x14
    1b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b70:	98 89       	ldd	r25, Y+16	; 0x10
    1b72:	28 17       	cp	r18, r24
    1b74:	39 07       	cpc	r19, r25
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <GLCD_wString+0x170>
    1b78:	79 cf       	rjmp	.-270    	; 0x1a6c <GLCD_wString+0x62>
		{
			GLCD_Write_Data(sys5x7[i]);
			_delay_ms(10);
		}
		str++;
    1b7a:	8d 89       	ldd	r24, Y+21	; 0x15
    1b7c:	9e 89       	ldd	r25, Y+22	; 0x16
    1b7e:	01 96       	adiw	r24, 0x01	; 1
    1b80:	9e 8b       	std	Y+22, r25	; 0x16
    1b82:	8d 8b       	std	Y+21, r24	; 0x15
void GLCD_wString(uint8 *str,Page_Num_Select page)
{
	uint16 i=0;
	GLCD_PageSelect(page);
	uint16 startfont=0,endfont=0;
	while (*str)
    1b84:	ed 89       	ldd	r30, Y+21	; 0x15
    1b86:	fe 89       	ldd	r31, Y+22	; 0x16
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <GLCD_wString+0x186>
    1b8e:	54 cf       	rjmp	.-344    	; 0x1a38 <GLCD_wString+0x2e>
			GLCD_Write_Data(sys5x7[i]);
			_delay_ms(10);
		}
		str++;
	}
}
    1b90:	67 96       	adiw	r28, 0x17	; 23
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <GLCD_displayImage>:
 *   if J The Variable That Responsible to Increment The Coulums if The First 64 byte that means
 *   That First Page Finished and need to accessed The Second page
 *   when j reach 128 it will accessed again the left page with increment into the next page and so on
 **********************************************************************************************/
void GLCD_displayImage(const unsigned char *str,uint8 x )
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	27 97       	sbiw	r28, 0x07	; 7
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	6f 83       	std	Y+7, r22	; 0x07
	uint16 i = 0;
    1bbc:	1c 82       	std	Y+4, r1	; 0x04
    1bbe:	1b 82       	std	Y+3, r1	; 0x03
	uint16 X_Address = (X_FIRST_ADDRESS&0xF8) | (x & 0x07);
    1bc0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	87 70       	andi	r24, 0x07	; 7
    1bc8:	90 70       	andi	r25, 0x00	; 0
    1bca:	88 6b       	ori	r24, 0xB8	; 184
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	30 c0       	rjmp	.+96     	; 0x1c32 <GLCD_displayImage+0x90>
	while(i < 1024)
	{
		if (j == 64 ) {
    1bd2:	80 91 6a 07 	lds	r24, 0x076A
    1bd6:	80 34       	cpi	r24, 0x40	; 64
    1bd8:	39 f4       	brne	.+14     	; 0x1be8 <GLCD_displayImage+0x46>
			GLCD_PageSelect(Right_Page);
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <GLCD_PageSelect>
			GLCD_Get_Command(X_Address);
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
    1be6:	11 c0       	rjmp	.+34     	; 0x1c0a <GLCD_displayImage+0x68>
		} else if (j == 128){
    1be8:	80 91 6a 07 	lds	r24, 0x076A
    1bec:	80 38       	cpi	r24, 0x80	; 128
    1bee:	69 f4       	brne	.+26     	; 0x1c0a <GLCD_displayImage+0x68>
			X_Address++;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	01 96       	adiw	r24, 0x01	; 1
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
			GLCD_PageSelect(Left_Page);
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	0e 94 ba 0c 	call	0x1974	; 0x1974 <GLCD_PageSelect>
			GLCD_Get_Command(X_Address);
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	0e 94 17 07 	call	0xe2e	; 0xe2e <GLCD_Get_Command>
			j = 0;
    1c06:	10 92 6a 07 	sts	0x076A, r1
		}
		GLCD_Write_Data(str[i]);
    1c0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	f9 01       	movw	r30, r18
    1c14:	e8 0f       	add	r30, r24
    1c16:	f9 1f       	adc	r31, r25
    1c18:	80 81       	ld	r24, Z
    1c1a:	0e 94 06 09 	call	0x120c	; 0x120c <GLCD_Write_Data>
		i++;
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
		j++;
    1c28:	80 91 6a 07 	lds	r24, 0x076A
    1c2c:	8f 5f       	subi	r24, 0xFF	; 255
    1c2e:	80 93 6a 07 	sts	0x076A, r24
 **********************************************************************************************/
void GLCD_displayImage(const unsigned char *str,uint8 x )
{
	uint16 i = 0;
	uint16 X_Address = (X_FIRST_ADDRESS&0xF8) | (x & 0x07);
	while(i < 1024)
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	24 e0       	ldi	r18, 0x04	; 4
    1c38:	80 30       	cpi	r24, 0x00	; 0
    1c3a:	92 07       	cpc	r25, r18
    1c3c:	50 f2       	brcs	.-108    	; 0x1bd2 <GLCD_displayImage+0x30>
		}
		GLCD_Write_Data(str[i]);
		i++;
		j++;
	}
}
    1c3e:	27 96       	adiw	r28, 0x07	; 7
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <GLCD_diplayGIF>:
 *   Parameters    : A 2D Array Used To
 *   Return Value  : Void
 *   Remarks       : None
 **********************************************************************************************/
void GLCD_diplayGIF(const unsigned char **images, uint8 NO_Images)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GLCD_diplayGIF+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <GLCD_diplayGIF+0x8>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	9b 83       	std	Y+3, r25	; 0x03
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
    1c60:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i = 0; i < NO_Images; i++){
    1c62:	19 82       	std	Y+1, r1	; 0x01
    1c64:	13 c0       	rjmp	.+38     	; 0x1c8c <GLCD_diplayGIF+0x3c>
		GLCD_displayImage(images[i],0);
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	88 2f       	mov	r24, r24
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9c 01       	movw	r18, r24
    1c6e:	22 0f       	add	r18, r18
    1c70:	33 1f       	adc	r19, r19
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	9b 81       	ldd	r25, Y+3	; 0x03
    1c76:	fc 01       	movw	r30, r24
    1c78:	e2 0f       	add	r30, r18
    1c7a:	f3 1f       	adc	r31, r19
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <GLCD_displayImage>
 *   Remarks       : None
 **********************************************************************************************/
void GLCD_diplayGIF(const unsigned char **images, uint8 NO_Images)
{
	uint8 i;
	for(i = 0; i < NO_Images; i++){
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	8f 5f       	subi	r24, 0xFF	; 255
    1c8a:	89 83       	std	Y+1, r24	; 0x01
    1c8c:	99 81       	ldd	r25, Y+1	; 0x01
    1c8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c90:	98 17       	cp	r25, r24
    1c92:	48 f3       	brcs	.-46     	; 0x1c66 <GLCD_diplayGIF+0x16>
		GLCD_displayImage(images[i],0);

	}
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <LCD_IntgerToString>:
void LCD_IntgerToString(uint32 data,Page_Num_Select page)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	65 97       	sbiw	r28, 0x15	; 21
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
    1cb6:	69 8b       	std	Y+17, r22	; 0x11
    1cb8:	7a 8b       	std	Y+18, r23	; 0x12
    1cba:	8b 8b       	std	Y+19, r24	; 0x13
    1cbc:	9c 8b       	std	Y+20, r25	; 0x14
    1cbe:	4d 8b       	std	Y+21, r20	; 0x15
	char buff[16];
	itoa(data,buff,10);
    1cc0:	89 89       	ldd	r24, Y+17	; 0x11
    1cc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc4:	9e 01       	movw	r18, r28
    1cc6:	2f 5f       	subi	r18, 0xFF	; 255
    1cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cca:	b9 01       	movw	r22, r18
    1ccc:	4a e0       	ldi	r20, 0x0A	; 10
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	0e 94 2b 14 	call	0x2856	; 0x2856 <itoa>
	GLCD_wString(buff,page);
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	01 96       	adiw	r24, 0x01	; 1
    1cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1cda:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GLCD_wString>
}
    1cde:	65 96       	adiw	r28, 0x15	; 21
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <GPIO_setupPinDirection>:
 */
#include "Gpio.h"
#include "common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirection direction)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <GPIO_setupPinDirection+0x6>
    1cf6:	00 d0       	rcall	.+0      	; 0x1cf8 <GPIO_setupPinDirection+0x8>
    1cf8:	0f 92       	push	r0
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	6a 83       	std	Y+2, r22	; 0x02
    1d02:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num>PORT_NUMS || pin_num > PINS_PER_PORT)
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	85 30       	cpi	r24, 0x05	; 5
    1d08:	08 f0       	brcs	.+2      	; 0x1d0c <GPIO_setupPinDirection+0x1c>
    1d0a:	e4 c0       	rjmp	.+456    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	89 30       	cpi	r24, 0x09	; 9
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <GPIO_setupPinDirection+0x24>
    1d12:	e0 c0       	rjmp	.+448    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
	{
		/*  NOTHING */
	}
	else
	{
		switch(port_num)
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <GPIO_setupPinDirection+0x3a>
    1d28:	47 c0       	rjmp	.+142    	; 0x1db8 <GPIO_setupPinDirection+0xc8>
    1d2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2e:	22 30       	cpi	r18, 0x02	; 2
    1d30:	31 05       	cpc	r19, r1
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <GPIO_setupPinDirection+0x4e>
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <GPIO_setupPinDirection+0x68>
    1d3c:	cb c0       	rjmp	.+406    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
    1d3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d40:	3d 81       	ldd	r19, Y+5	; 0x05
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <GPIO_setupPinDirection+0x5a>
    1d48:	67 c0       	rjmp	.+206    	; 0x1e18 <GPIO_setupPinDirection+0x128>
    1d4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4e:	83 30       	cpi	r24, 0x03	; 3
    1d50:	91 05       	cpc	r25, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <GPIO_setupPinDirection+0x66>
    1d54:	91 c0       	rjmp	.+290    	; 0x1e78 <GPIO_setupPinDirection+0x188>
    1d56:	be c0       	rjmp	.+380    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	a1 f4       	brne	.+40     	; 0x1d86 <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA_REG,pin_num);
    1d5e:	aa e3       	ldi	r26, 0x3A	; 58
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	ea e3       	ldi	r30, 0x3A	; 58
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	48 2f       	mov	r20, r24
    1d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	02 2e       	mov	r0, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <GPIO_setupPinDirection+0x8c>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	0a 94       	dec	r0
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <GPIO_setupPinDirection+0x88>
    1d80:	84 2b       	or	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	a7 c0       	rjmp	.+334    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <GPIO_setupPinDirection+0x9e>
    1d8c:	a3 c0       	rjmp	.+326    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRA_REG,pin_num);
    1d8e:	aa e3       	ldi	r26, 0x3A	; 58
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	ea e3       	ldi	r30, 0x3A	; 58
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <GPIO_setupPinDirection+0xbc>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <GPIO_setupPinDirection+0xb8>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
    1db6:	8e c0       	rjmp	.+284    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	a1 f4       	brne	.+40     	; 0x1de6 <GPIO_setupPinDirection+0xf6>
				{
					SET_BIT(DDRB_REG,pin_num);
    1dbe:	a7 e3       	ldi	r26, 0x37	; 55
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e7 e3       	ldi	r30, 0x37	; 55
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <GPIO_setupPinDirection+0xec>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <GPIO_setupPinDirection+0xe8>
    1de0:	84 2b       	or	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	77 c0       	rjmp	.+238    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	88 23       	and	r24, r24
    1dea:	09 f0       	breq	.+2      	; 0x1dee <GPIO_setupPinDirection+0xfe>
    1dec:	73 c0       	rjmp	.+230    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRB_REG,pin_num);
    1dee:	a7 e3       	ldi	r26, 0x37	; 55
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e3       	ldi	r30, 0x37	; 55
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <GPIO_setupPinDirection+0x11c>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <GPIO_setupPinDirection+0x118>
    1e10:	80 95       	com	r24
    1e12:	84 23       	and	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	5e c0       	rjmp	.+188    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	a1 f4       	brne	.+40     	; 0x1e46 <GPIO_setupPinDirection+0x156>
				{
					SET_BIT(DDRC_REG,pin_num);
    1e1e:	a4 e3       	ldi	r26, 0x34	; 52
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	e4 e3       	ldi	r30, 0x34	; 52
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	80 81       	ld	r24, Z
    1e28:	48 2f       	mov	r20, r24
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 2e       	mov	r0, r18
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <GPIO_setupPinDirection+0x14c>
    1e38:	88 0f       	add	r24, r24
    1e3a:	99 1f       	adc	r25, r25
    1e3c:	0a 94       	dec	r0
    1e3e:	e2 f7       	brpl	.-8      	; 0x1e38 <GPIO_setupPinDirection+0x148>
    1e40:	84 2b       	or	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	47 c0       	rjmp	.+142    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	88 23       	and	r24, r24
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <GPIO_setupPinDirection+0x15e>
    1e4c:	43 c0       	rjmp	.+134    	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRC_REG,pin_num);
    1e4e:	a4 e3       	ldi	r26, 0x34	; 52
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e4 e3       	ldi	r30, 0x34	; 52
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	48 2f       	mov	r20, r24
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	02 2e       	mov	r0, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <GPIO_setupPinDirection+0x17c>
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	0a 94       	dec	r0
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <GPIO_setupPinDirection+0x178>
    1e70:	80 95       	com	r24
    1e72:	84 23       	and	r24, r20
    1e74:	8c 93       	st	X, r24
    1e76:	2e c0       	rjmp	.+92     	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	a1 f4       	brne	.+40     	; 0x1ea6 <GPIO_setupPinDirection+0x1b6>
				{
					SET_BIT(DDRD_REG,pin_num);
    1e7e:	a1 e3       	ldi	r26, 0x31	; 49
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e1 e3       	ldi	r30, 0x31	; 49
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GPIO_setupPinDirection+0x1ac>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <GPIO_setupPinDirection+0x1a8>
    1ea0:	84 2b       	or	r24, r20
    1ea2:	8c 93       	st	X, r24
    1ea4:	17 c0       	rjmp	.+46     	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	88 23       	and	r24, r24
    1eaa:	a1 f4       	brne	.+40     	; 0x1ed4 <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRD_REG,pin_num);
    1eac:	a1 e3       	ldi	r26, 0x31	; 49
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e1 e3       	ldi	r30, 0x31	; 49
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <GPIO_setupPinDirection+0x1da>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <GPIO_setupPinDirection+0x1d6>
    1ece:	80 95       	com	r24
    1ed0:	84 23       	and	r24, r20
    1ed2:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret

00001ee4 <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ee4:	df 93       	push	r29
    1ee6:	cf 93       	push	r28
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <GPIO_writePin+0x6>
    1eea:	00 d0       	rcall	.+0      	; 0x1eec <GPIO_writePin+0x8>
    1eec:	0f 92       	push	r0
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	6a 83       	std	Y+2, r22	; 0x02
    1ef6:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > PORT_NUMS || pin_num >PINS_PER_PORT)
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	85 30       	cpi	r24, 0x05	; 5
    1efc:	08 f0       	brcs	.+2      	; 0x1f00 <GPIO_writePin+0x1c>
    1efe:	e4 c0       	rjmp	.+456    	; 0x20c8 <GPIO_writePin+0x1e4>
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	89 30       	cpi	r24, 0x09	; 9
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <GPIO_writePin+0x24>
    1f06:	e0 c0       	rjmp	.+448    	; 0x20c8 <GPIO_writePin+0x1e4>
	{

	}
	else
	{
		switch(port_num)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	3d 83       	std	Y+5, r19	; 0x05
    1f10:	2c 83       	std	Y+4, r18	; 0x04
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	91 05       	cpc	r25, r1
    1f1a:	09 f4       	brne	.+2      	; 0x1f1e <GPIO_writePin+0x3a>
    1f1c:	47 c0       	rjmp	.+142    	; 0x1fac <GPIO_writePin+0xc8>
    1f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f20:	3d 81       	ldd	r19, Y+5	; 0x05
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <GPIO_writePin+0x4e>
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	00 97       	sbiw	r24, 0x00	; 0
    1f2e:	71 f0       	breq	.+28     	; 0x1f4c <GPIO_writePin+0x68>
    1f30:	cb c0       	rjmp	.+406    	; 0x20c8 <GPIO_writePin+0x1e4>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	22 30       	cpi	r18, 0x02	; 2
    1f38:	31 05       	cpc	r19, r1
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <GPIO_writePin+0x5a>
    1f3c:	67 c0       	rjmp	.+206    	; 0x200c <GPIO_writePin+0x128>
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	83 30       	cpi	r24, 0x03	; 3
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <GPIO_writePin+0x66>
    1f48:	91 c0       	rjmp	.+290    	; 0x206c <GPIO_writePin+0x188>
    1f4a:	be c0       	rjmp	.+380    	; 0x20c8 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	a1 f4       	brne	.+40     	; 0x1f7a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA_REG,pin_num);
    1f52:	ab e3       	ldi	r26, 0x3B	; 59
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <GPIO_writePin+0x8c>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <GPIO_writePin+0x88>
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	a7 c0       	rjmp	.+334    	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	88 23       	and	r24, r24
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <GPIO_writePin+0x9e>
    1f80:	a3 c0       	rjmp	.+326    	; 0x20c8 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA_REG,pin_num);
    1f82:	ab e3       	ldi	r26, 0x3B	; 59
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	eb e3       	ldi	r30, 0x3B	; 59
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <GPIO_writePin+0xbc>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <GPIO_writePin+0xb8>
    1fa4:	80 95       	com	r24
    1fa6:	84 23       	and	r24, r20
    1fa8:	8c 93       	st	X, r24
    1faa:	8e c0       	rjmp	.+284    	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	a1 f4       	brne	.+40     	; 0x1fda <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB_REG,pin_num);
    1fb2:	a8 e3       	ldi	r26, 0x38	; 56
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e8 e3       	ldi	r30, 0x38	; 56
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	48 2f       	mov	r20, r24
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	28 2f       	mov	r18, r24
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 2e       	mov	r0, r18
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <GPIO_writePin+0xec>
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	0a 94       	dec	r0
    1fd2:	e2 f7       	brpl	.-8      	; 0x1fcc <GPIO_writePin+0xe8>
    1fd4:	84 2b       	or	r24, r20
    1fd6:	8c 93       	st	X, r24
    1fd8:	77 c0       	rjmp	.+238    	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	88 23       	and	r24, r24
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <GPIO_writePin+0xfe>
    1fe0:	73 c0       	rjmp	.+230    	; 0x20c8 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB_REG,pin_num);
    1fe2:	a8 e3       	ldi	r26, 0x38	; 56
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	e8 e3       	ldi	r30, 0x38	; 56
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	48 2f       	mov	r20, r24
    1fee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	02 2e       	mov	r0, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <GPIO_writePin+0x11c>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	0a 94       	dec	r0
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <GPIO_writePin+0x118>
    2004:	80 95       	com	r24
    2006:	84 23       	and	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	5e c0       	rjmp	.+188    	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	a1 f4       	brne	.+40     	; 0x203a <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC_REG,pin_num);
    2012:	a5 e3       	ldi	r26, 0x35	; 53
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e3       	ldi	r30, 0x35	; 53
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	48 2f       	mov	r20, r24
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <GPIO_writePin+0x14c>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <GPIO_writePin+0x148>
    2034:	84 2b       	or	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	47 c0       	rjmp	.+142    	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	88 23       	and	r24, r24
    203e:	09 f0       	breq	.+2      	; 0x2042 <GPIO_writePin+0x15e>
    2040:	43 c0       	rjmp	.+134    	; 0x20c8 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC_REG,pin_num);
    2042:	a5 e3       	ldi	r26, 0x35	; 53
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e5 e3       	ldi	r30, 0x35	; 53
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	48 2f       	mov	r20, r24
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 2e       	mov	r0, r18
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <GPIO_writePin+0x17c>
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	0a 94       	dec	r0
    2062:	e2 f7       	brpl	.-8      	; 0x205c <GPIO_writePin+0x178>
    2064:	80 95       	com	r24
    2066:	84 23       	and	r24, r20
    2068:	8c 93       	st	X, r24
    206a:	2e c0       	rjmp	.+92     	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	81 30       	cpi	r24, 0x01	; 1
    2070:	a1 f4       	brne	.+40     	; 0x209a <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD_REG,pin_num);
    2072:	a2 e3       	ldi	r26, 0x32	; 50
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e2 e3       	ldi	r30, 0x32	; 50
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	48 2f       	mov	r20, r24
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	02 2e       	mov	r0, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <GPIO_writePin+0x1ac>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <GPIO_writePin+0x1a8>
    2094:	84 2b       	or	r24, r20
    2096:	8c 93       	st	X, r24
    2098:	17 c0       	rjmp	.+46     	; 0x20c8 <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	88 23       	and	r24, r24
    209e:	a1 f4       	brne	.+40     	; 0x20c8 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD_REG,pin_num);
    20a0:	a2 e3       	ldi	r26, 0x32	; 50
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e2 e3       	ldi	r30, 0x32	; 50
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <GPIO_writePin+0x1da>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <GPIO_writePin+0x1d6>
    20c2:	80 95       	com	r24
    20c4:	84 23       	and	r24, r20
    20c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <GPIO_readPin+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <GPIO_readPin+0x8>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PIN_value=LOGIC_LOW;
    20ea:	19 82       	std	Y+1, r1	; 0x01
	if (port_num > PORT_NUMS || pin_num >PINS_PER_PORT)
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	85 30       	cpi	r24, 0x05	; 5
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <GPIO_readPin+0x1c>
    20f2:	43 c0       	rjmp	.+134    	; 0x217a <GPIO_readPin+0xa2>
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	89 30       	cpi	r24, 0x09	; 9
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <GPIO_readPin+0x24>
    20fa:	3f c0       	rjmp	.+126    	; 0x217a <GPIO_readPin+0xa2>
	{

	}
	else
	{
		switch(port_num)
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	3d 83       	std	Y+5, r19	; 0x05
    2104:	2c 83       	std	Y+4, r18	; 0x04
    2106:	4c 81       	ldd	r20, Y+4	; 0x04
    2108:	5d 81       	ldd	r21, Y+5	; 0x05
    210a:	41 15       	cp	r20, r1
    210c:	51 05       	cpc	r21, r1
    210e:	31 f0       	breq	.+12     	; 0x211c <GPIO_readPin+0x44>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 05       	cpc	r25, r1
    2118:	c9 f0       	breq	.+50     	; 0x214c <GPIO_readPin+0x74>
    211a:	2f c0       	rjmp	.+94     	; 0x217a <GPIO_readPin+0xa2>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,pin_num))
    211c:	e9 e3       	ldi	r30, 0x39	; 57
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <GPIO_readPin+0x5c>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <GPIO_readPin+0x58>
    2138:	ca 01       	movw	r24, r20
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	90 70       	andi	r25, 0x00	; 0
    213e:	88 23       	and	r24, r24
    2140:	19 f0       	breq	.+6      	; 0x2148 <GPIO_readPin+0x70>
			{
				PIN_value=LOGIC_HIGH;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	19 c0       	rjmp	.+50     	; 0x217a <GPIO_readPin+0xa2>
			}
			else
			{
				PIN_value=LOGIC_LOW;
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	17 c0       	rjmp	.+46     	; 0x217a <GPIO_readPin+0xa2>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,pin_num))
    214c:	e6 e3       	ldi	r30, 0x36	; 54
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a9 01       	movw	r20, r18
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <GPIO_readPin+0x8c>
    2160:	55 95       	asr	r21
    2162:	47 95       	ror	r20
    2164:	8a 95       	dec	r24
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <GPIO_readPin+0x88>
    2168:	ca 01       	movw	r24, r20
    216a:	81 70       	andi	r24, 0x01	; 1
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	88 23       	and	r24, r24
    2170:	19 f0       	breq	.+6      	; 0x2178 <GPIO_readPin+0xa0>
			{
				PIN_value=LOGIC_HIGH;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	89 83       	std	Y+1, r24	; 0x01
    2176:	01 c0       	rjmp	.+2      	; 0x217a <GPIO_readPin+0xa2>
			}
			else
			{
				PIN_value=LOGIC_LOW;
    2178:	19 82       	std	Y+1, r1	; 0x01
				PIN_value=LOGIC_LOW;
			}
			break;
		}
	}
	return PIN_value;
    217a:	89 81       	ldd	r24, Y+1	; 0x01
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <GPIO_setupPortDirection>:
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirection direction)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <GPIO_setupPortDirection+0x6>
    2192:	00 d0       	rcall	.+0      	; 0x2194 <GPIO_setupPortDirection+0x8>
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >PORT_NUMS)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	85 30       	cpi	r24, 0x05	; 5
    21a0:	08 f0       	brcs	.+2      	; 0x21a4 <GPIO_setupPortDirection+0x18>
    21a2:	4e c0       	rjmp	.+156    	; 0x2240 <GPIO_setupPortDirection+0xb4>
	{

	}
	else
	{
		switch(port_num)
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3c 83       	std	Y+4, r19	; 0x04
    21ac:	2b 83       	std	Y+3, r18	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	09 f1       	breq	.+66     	; 0x21fa <GPIO_setupPortDirection+0x6e>
    21b8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ba:	3c 81       	ldd	r19, Y+4	; 0x04
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <GPIO_setupPortDirection+0x40>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <GPIO_setupPortDirection+0x56>
    21ca:	3a c0       	rjmp	.+116    	; 0x2240 <GPIO_setupPortDirection+0xb4>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	f1 f0       	breq	.+60     	; 0x2212 <GPIO_setupPortDirection+0x86>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	91 05       	cpc	r25, r1
    21de:	29 f1       	breq	.+74     	; 0x222a <GPIO_setupPortDirection+0x9e>
    21e0:	2f c0       	rjmp	.+94     	; 0x2240 <GPIO_setupPortDirection+0xb4>
		{
		case PORTA_ID:
			if(direction == PORT_OUTPUT)
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	8f 3f       	cpi	r24, 0xFF	; 255
    21e6:	29 f4       	brne	.+10     	; 0x21f2 <GPIO_setupPortDirection+0x66>
			{
				DDRA_REG=PORT_OUTPUT;
    21e8:	ea e3       	ldi	r30, 0x3A	; 58
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	80 83       	st	Z, r24
    21f0:	27 c0       	rjmp	.+78     	; 0x2240 <GPIO_setupPortDirection+0xb4>
			}
			else
			{
				DDRA_REG=PORT_INPUT;
    21f2:	ea e3       	ldi	r30, 0x3A	; 58
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	10 82       	st	Z, r1
    21f8:	23 c0       	rjmp	.+70     	; 0x2240 <GPIO_setupPortDirection+0xb4>
			}
			break;
		case PORTB_ID:
				if(direction == PORT_OUTPUT)
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	8f 3f       	cpi	r24, 0xFF	; 255
    21fe:	29 f4       	brne	.+10     	; 0x220a <GPIO_setupPortDirection+0x7e>
				{
					DDRB_REG=PORT_OUTPUT;
    2200:	e7 e3       	ldi	r30, 0x37	; 55
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8f ef       	ldi	r24, 0xFF	; 255
    2206:	80 83       	st	Z, r24
    2208:	1b c0       	rjmp	.+54     	; 0x2240 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRB_REG=PORT_INPUT;
    220a:	e7 e3       	ldi	r30, 0x37	; 55
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	10 82       	st	Z, r1
    2210:	17 c0       	rjmp	.+46     	; 0x2240 <GPIO_setupPortDirection+0xb4>
				}
				break;
		case PORTC_ID:
				if(direction == PORT_OUTPUT)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	8f 3f       	cpi	r24, 0xFF	; 255
    2216:	29 f4       	brne	.+10     	; 0x2222 <GPIO_setupPortDirection+0x96>
				{
					DDRC_REG=PORT_OUTPUT;
    2218:	e4 e3       	ldi	r30, 0x34	; 52
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	80 83       	st	Z, r24
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRC_REG=PORT_INPUT;
    2222:	e4 e3       	ldi	r30, 0x34	; 52
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	10 82       	st	Z, r1
    2228:	0b c0       	rjmp	.+22     	; 0x2240 <GPIO_setupPortDirection+0xb4>
				}
				break;
		case PORTD_ID:
				if(direction == PORT_OUTPUT)
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	8f 3f       	cpi	r24, 0xFF	; 255
    222e:	29 f4       	brne	.+10     	; 0x223a <GPIO_setupPortDirection+0xae>
				{
					DDRD_REG=PORT_OUTPUT;
    2230:	e1 e3       	ldi	r30, 0x31	; 49
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	80 83       	st	Z, r24
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRD_REG=PORT_INPUT;
    223a:	e1 e3       	ldi	r30, 0x31	; 49
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	10 82       	st	Z, r1
				}
				break;

	}
	}
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	00 d0       	rcall	.+0      	; 0x2254 <GPIO_writePort+0x6>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <GPIO_writePort+0x8>
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >PORT_NUMS)
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	85 30       	cpi	r24, 0x05	; 5
    2262:	90 f5       	brcc	.+100    	; 0x22c8 <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	28 2f       	mov	r18, r24
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	3c 83       	std	Y+4, r19	; 0x04
    226c:	2b 83       	std	Y+3, r18	; 0x03
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	9c 81       	ldd	r25, Y+4	; 0x04
    2272:	81 30       	cpi	r24, 0x01	; 1
    2274:	91 05       	cpc	r25, r1
    2276:	d1 f0       	breq	.+52     	; 0x22ac <GPIO_writePort+0x5e>
    2278:	2b 81       	ldd	r18, Y+3	; 0x03
    227a:	3c 81       	ldd	r19, Y+4	; 0x04
    227c:	22 30       	cpi	r18, 0x02	; 2
    227e:	31 05       	cpc	r19, r1
    2280:	2c f4       	brge	.+10     	; 0x228c <GPIO_writePort+0x3e>
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	61 f0       	breq	.+24     	; 0x22a2 <GPIO_writePort+0x54>
    228a:	1e c0       	rjmp	.+60     	; 0x22c8 <GPIO_writePort+0x7a>
    228c:	2b 81       	ldd	r18, Y+3	; 0x03
    228e:	3c 81       	ldd	r19, Y+4	; 0x04
    2290:	22 30       	cpi	r18, 0x02	; 2
    2292:	31 05       	cpc	r19, r1
    2294:	81 f0       	breq	.+32     	; 0x22b6 <GPIO_writePort+0x68>
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	9c 81       	ldd	r25, Y+4	; 0x04
    229a:	83 30       	cpi	r24, 0x03	; 3
    229c:	91 05       	cpc	r25, r1
    229e:	81 f0       	breq	.+32     	; 0x22c0 <GPIO_writePort+0x72>
    22a0:	13 c0       	rjmp	.+38     	; 0x22c8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG=value;
    22a2:	eb e3       	ldi	r30, 0x3B	; 59
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	80 83       	st	Z, r24
    22aa:	0e c0       	rjmp	.+28     	; 0x22c8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG=value;
    22ac:	e8 e3       	ldi	r30, 0x38	; 56
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	80 83       	st	Z, r24
    22b4:	09 c0       	rjmp	.+18     	; 0x22c8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG=value;
    22b6:	e5 e3       	ldi	r30, 0x35	; 53
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	80 83       	st	Z, r24
    22be:	04 c0       	rjmp	.+8      	; 0x22c8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG=value;
    22c0:	e2 e3       	ldi	r30, 0x32	; 50
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	00 d0       	rcall	.+0      	; 0x22dc <GPIO_readPort+0x6>
    22dc:	00 d0       	rcall	.+0      	; 0x22de <GPIO_readPort+0x8>
    22de:	0f 92       	push	r0
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_VALUE;
	if(port_num >PORT_NUMS)
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	85 30       	cpi	r24, 0x05	; 5
    22ea:	10 f0       	brcs	.+4      	; 0x22f0 <GPIO_readPort+0x1a>
	{
		return 0;
    22ec:	1d 82       	std	Y+5, r1	; 0x05
    22ee:	34 c0       	rjmp	.+104    	; 0x2358 <GPIO_readPort+0x82>
	}
	else
	{
		switch(port_num)
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	3c 83       	std	Y+4, r19	; 0x04
    22f8:	2b 83       	std	Y+3, r18	; 0x03
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	d1 f0       	breq	.+52     	; 0x2338 <GPIO_readPort+0x62>
    2304:	2b 81       	ldd	r18, Y+3	; 0x03
    2306:	3c 81       	ldd	r19, Y+4	; 0x04
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	2c f4       	brge	.+10     	; 0x2318 <GPIO_readPort+0x42>
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	9c 81       	ldd	r25, Y+4	; 0x04
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	61 f0       	breq	.+24     	; 0x232e <GPIO_readPort+0x58>
    2316:	1e c0       	rjmp	.+60     	; 0x2354 <GPIO_readPort+0x7e>
    2318:	2b 81       	ldd	r18, Y+3	; 0x03
    231a:	3c 81       	ldd	r19, Y+4	; 0x04
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	81 f0       	breq	.+32     	; 0x2342 <GPIO_readPort+0x6c>
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	91 05       	cpc	r25, r1
    232a:	81 f0       	breq	.+32     	; 0x234c <GPIO_readPort+0x76>
    232c:	13 c0       	rjmp	.+38     	; 0x2354 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			PORT_VALUE=PINA_REG;
    232e:	e9 e3       	ldi	r30, 0x39	; 57
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	0e c0       	rjmp	.+28     	; 0x2354 <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			PORT_VALUE=PINB_REG;
    2338:	e6 e3       	ldi	r30, 0x36	; 54
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	09 c0       	rjmp	.+18     	; 0x2354 <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			PORT_VALUE=PINC_REG;
    2342:	e3 e3       	ldi	r30, 0x33	; 51
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	04 c0       	rjmp	.+8      	; 0x2354 <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			PORT_VALUE=PIND_REG;
    234c:	e0 e3       	ldi	r30, 0x30	; 48
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	80 81       	ld	r24, Z
    2352:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
	return PORT_VALUE;
    2354:	99 81       	ldd	r25, Y+1	; 0x01
    2356:	9d 83       	std	Y+5, r25	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05

}
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <App_DutyCycle>:
static uint16 T1_Period_Time=0;
static uint16 T2_Period_Time=0;
static uint16 T3_Period_Time=0;
uint8 Char_Display[]={	0x23, 0x13, 0x08, 0x64, 0x62};
void App_DutyCycle(void)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
	g_edges_count++;
    2372:	80 91 6b 07 	lds	r24, 0x076B
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	80 93 6b 07 	sts	0x076B, r24

	if(g_edges_count==1)
    237c:	80 91 6b 07 	lds	r24, 0x076B
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	31 f4       	brne	.+12     	; 0x2390 <App_DutyCycle+0x26>
	{
		ICU_ClearTimerValue();
    2384:	0e 94 9c 13 	call	0x2738	; 0x2738 <ICU_ClearTimerValue>
		ICU_DetectEdgeType(FALLING);
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ICU_DetectEdgeType>
    238e:	2b c0       	rjmp	.+86     	; 0x23e6 <App_DutyCycle+0x7c>
	}
	else if(g_edges_count==2)
    2390:	80 91 6b 07 	lds	r24, 0x076B
    2394:	82 30       	cpi	r24, 0x02	; 2
    2396:	51 f4       	brne	.+20     	; 0x23ac <App_DutyCycle+0x42>
	{
		T1_Period_Time=ICU_ReturnInputCaptureValue();
    2398:	0e 94 a7 13 	call	0x274e	; 0x274e <ICU_ReturnInputCaptureValue>
    239c:	90 93 6d 07 	sts	0x076D, r25
    23a0:	80 93 6c 07 	sts	0x076C, r24
		ICU_DetectEdgeType(RISING);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ICU_DetectEdgeType>
    23aa:	1d c0       	rjmp	.+58     	; 0x23e6 <App_DutyCycle+0x7c>
	}
	else if (g_edges_count==3)
    23ac:	80 91 6b 07 	lds	r24, 0x076B
    23b0:	83 30       	cpi	r24, 0x03	; 3
    23b2:	51 f4       	brne	.+20     	; 0x23c8 <App_DutyCycle+0x5e>
	{
		T2_Period_Time=ICU_ReturnInputCaptureValue();
    23b4:	0e 94 a7 13 	call	0x274e	; 0x274e <ICU_ReturnInputCaptureValue>
    23b8:	90 93 6f 07 	sts	0x076F, r25
    23bc:	80 93 6e 07 	sts	0x076E, r24
		ICU_DetectEdgeType(FALLING);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ICU_DetectEdgeType>
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <App_DutyCycle+0x7c>
	}
	else if(g_edges_count==4)
    23c8:	80 91 6b 07 	lds	r24, 0x076B
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	59 f4       	brne	.+22     	; 0x23e6 <App_DutyCycle+0x7c>
	{
		T3_Period_Time=ICU_ReturnInputCaptureValue();
    23d0:	0e 94 a7 13 	call	0x274e	; 0x274e <ICU_ReturnInputCaptureValue>
    23d4:	90 93 71 07 	sts	0x0771, r25
    23d8:	80 93 70 07 	sts	0x0770, r24
		ICU_ClearTimerValue();
    23dc:	0e 94 9c 13 	call	0x2738	; 0x2738 <ICU_ClearTimerValue>
		ICU_DetectEdgeType(RISING);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ICU_DetectEdgeType>
	}


}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <main>:

int main(void)
{	uint32 Duty_cycle=0;
    23ec:	ef 92       	push	r14
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	2c 97       	sbiw	r28, 0x0c	; 12
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	1f 82       	std	Y+7, r1	; 0x07
    240a:	18 86       	std	Y+8, r1	; 0x08
    240c:	19 86       	std	Y+9, r1	; 0x09
    240e:	1a 86       	std	Y+10, r1	; 0x0a
uint16 Period_cycle=0;
    2410:	1e 82       	std	Y+6, r1	; 0x06
    2412:	1d 82       	std	Y+5, r1	; 0x05
uint32 Freq_hz=0;
    2414:	19 82       	std	Y+1, r1	; 0x01
    2416:	1a 82       	std	Y+2, r1	; 0x02
    2418:	1b 82       	std	Y+3, r1	; 0x03
    241a:	1c 82       	std	Y+4, r1	; 0x04
ICU_Config Icu_Conf ={No_Clock,RISING};
    241c:	1b 86       	std	Y+11, r1	; 0x0b
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	8c 87       	std	Y+12, r24	; 0x0c
GLCD_Init();
    2422:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <GLCD_Init>
GLCD_Clear_Display();
    2426:	0e 94 99 0b 	call	0x1732	; 0x1732 <GLCD_Clear_Display>
 GLCD_displayImage(Signal,0);
    242a:	89 e6       	ldi	r24, 0x69	; 105
    242c:	93 e0       	ldi	r25, 0x03	; 3
    242e:	60 e0       	ldi	r22, 0x00	; 0
    2430:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <GLCD_displayImage>
SetCallBack(App_DutyCycle);
    2434:	85 eb       	ldi	r24, 0xB5	; 181
    2436:	91 e1       	ldi	r25, 0x11	; 17
    2438:	0e 94 b2 13 	call	0x2764	; 0x2764 <SetCallBack>
SREG|=(1<<7);
    243c:	af e5       	ldi	r26, 0x5F	; 95
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	ef e5       	ldi	r30, 0x5F	; 95
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	80 68       	ori	r24, 0x80	; 128
    2448:	8c 93       	st	X, r24
ICU_init(&Icu_Conf);
    244a:	ce 01       	movw	r24, r28
    244c:	0b 96       	adiw	r24, 0x0b	; 11
    244e:	0e 94 22 13 	call	0x2644	; 0x2644 <ICU_init>



		for(;;)
		{
			if(g_edges_count==4)
    2452:	80 91 6b 07 	lds	r24, 0x076B
    2456:	84 30       	cpi	r24, 0x04	; 4
    2458:	e1 f7       	brne	.-8      	; 0x2452 <main+0x66>
			{
				De_Init();
    245a:	0e 94 c4 13 	call	0x2788	; 0x2788 <De_Init>
				g_edges_count=0;
    245e:	10 92 6b 07 	sts	0x076B, r1
				Set_Cursor(0,3);
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	63 e0       	ldi	r22, 0x03	; 3
    2466:	0e 94 cc 0b 	call	0x1798	; 0x1798 <Set_Cursor>
				GLCD_wString("Duty=",Right_Page);
    246a:	80 e6       	ldi	r24, 0x60	; 96
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	61 e0       	ldi	r22, 0x01	; 1
    2470:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GLCD_wString>
				Duty_cycle=((float)(T3_Period_Time-T2_Period_Time)/(T3_Period_Time-T1_Period_Time))*(100);
    2474:	20 91 70 07 	lds	r18, 0x0770
    2478:	30 91 71 07 	lds	r19, 0x0771
    247c:	80 91 6e 07 	lds	r24, 0x076E
    2480:	90 91 6f 07 	lds	r25, 0x076F
    2484:	a9 01       	movw	r20, r18
    2486:	48 1b       	sub	r20, r24
    2488:	59 0b       	sbc	r21, r25
    248a:	ca 01       	movw	r24, r20
    248c:	cc 01       	movw	r24, r24
    248e:	a0 e0       	ldi	r26, 0x00	; 0
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    249a:	7b 01       	movw	r14, r22
    249c:	8c 01       	movw	r16, r24
    249e:	20 91 70 07 	lds	r18, 0x0770
    24a2:	30 91 71 07 	lds	r19, 0x0771
    24a6:	80 91 6c 07 	lds	r24, 0x076C
    24aa:	90 91 6d 07 	lds	r25, 0x076D
    24ae:	a9 01       	movw	r20, r18
    24b0:	48 1b       	sub	r20, r24
    24b2:	59 0b       	sbc	r21, r25
    24b4:	ca 01       	movw	r24, r20
    24b6:	cc 01       	movw	r24, r24
    24b8:	a0 e0       	ldi	r26, 0x00	; 0
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    24c4:	9b 01       	movw	r18, r22
    24c6:	ac 01       	movw	r20, r24
    24c8:	c8 01       	movw	r24, r16
    24ca:	b7 01       	movw	r22, r14
    24cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	48 ec       	ldi	r20, 0xC8	; 200
    24de:	52 e4       	ldi	r21, 0x42	; 66
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	8f 83       	std	Y+7, r24	; 0x07
    24f6:	98 87       	std	Y+8, r25	; 0x08
    24f8:	a9 87       	std	Y+9, r26	; 0x09
    24fa:	ba 87       	std	Y+10, r27	; 0x0a
				LCD_IntgerToString(Duty_cycle,Right_Page);
    24fc:	8f 81       	ldd	r24, Y+7	; 0x07
    24fe:	98 85       	ldd	r25, Y+8	; 0x08
    2500:	a9 85       	ldd	r26, Y+9	; 0x09
    2502:	ba 85       	ldd	r27, Y+10	; 0x0a
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <LCD_IntgerToString>
				glcd_writeChar(Char_Display,Right_Page);
    250e:	84 e6       	ldi	r24, 0x64	; 100
    2510:	93 e0       	ldi	r25, 0x03	; 3
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <glcd_writeChar>
				Set_Cursor(0,0);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <Set_Cursor>
				GLCD_wString("Tperiod=",Left_Page);
    2520:	86 e6       	ldi	r24, 0x66	; 102
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	60 e0       	ldi	r22, 0x00	; 0
    2526:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GLCD_wString>
				Period_cycle=((T3_Period_Time-T1_Period_Time)/(1000));
    252a:	20 91 70 07 	lds	r18, 0x0770
    252e:	30 91 71 07 	lds	r19, 0x0771
    2532:	80 91 6c 07 	lds	r24, 0x076C
    2536:	90 91 6d 07 	lds	r25, 0x076D
    253a:	a9 01       	movw	r20, r18
    253c:	48 1b       	sub	r20, r24
    253e:	59 0b       	sbc	r21, r25
    2540:	ca 01       	movw	r24, r20
    2542:	28 ee       	ldi	r18, 0xE8	; 232
    2544:	33 e0       	ldi	r19, 0x03	; 3
    2546:	b9 01       	movw	r22, r18
    2548:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodhi4>
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
				LCD_IntgerToString(Period_cycle,Left_Page);
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	9e 81       	ldd	r25, Y+6	; 0x06
    2556:	cc 01       	movw	r24, r24
    2558:	a0 e0       	ldi	r26, 0x00	; 0
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <LCD_IntgerToString>
				GLCD_wString("ms",Left_Page);
    2566:	8f e6       	ldi	r24, 0x6F	; 111
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GLCD_wString>
				Set_Cursor(0,6);
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	66 e0       	ldi	r22, 0x06	; 6
    2574:	0e 94 cc 0b 	call	0x1798	; 0x1798 <Set_Cursor>
				GLCD_wString("Freq=",Left_Page);
    2578:	82 e7       	ldi	r24, 0x72	; 114
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GLCD_wString>
				Freq_hz=((float)(10/Period_cycle)*(100));
    2582:	8a e0       	ldi	r24, 0x0A	; 10
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	2d 81       	ldd	r18, Y+5	; 0x05
    2588:	3e 81       	ldd	r19, Y+6	; 0x06
    258a:	b9 01       	movw	r22, r18
    258c:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodhi4>
    2590:	cb 01       	movw	r24, r22
    2592:	cc 01       	movw	r24, r24
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	48 ec       	ldi	r20, 0xC8	; 200
    25ae:	52 e4       	ldi	r21, 0x42	; 66
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	9a 83       	std	Y+2, r25	; 0x02
    25c8:	ab 83       	std	Y+3, r26	; 0x03
    25ca:	bc 83       	std	Y+4, r27	; 0x04
				LCD_IntgerToString(Freq_hz,Left_Page);
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	9a 81       	ldd	r25, Y+2	; 0x02
    25d0:	ab 81       	ldd	r26, Y+3	; 0x03
    25d2:	bc 81       	ldd	r27, Y+4	; 0x04
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <LCD_IntgerToString>
				GLCD_wString("Hz",Left_Page);
    25de:	88 e7       	ldi	r24, 0x78	; 120
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <GLCD_wString>
    25e8:	34 cf       	rjmp	.-408    	; 0x2452 <main+0x66>

000025ea <__vector_6>:
#include <avr/interrupt.h>

static volatile void(*g_SETCALLBACKptr)(void)=NULL_PTR;

ISR (TIMER1_CAPT_vect)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	2f 93       	push	r18
    25f6:	3f 93       	push	r19
    25f8:	4f 93       	push	r20
    25fa:	5f 93       	push	r21
    25fc:	6f 93       	push	r22
    25fe:	7f 93       	push	r23
    2600:	8f 93       	push	r24
    2602:	9f 93       	push	r25
    2604:	af 93       	push	r26
    2606:	bf 93       	push	r27
    2608:	ef 93       	push	r30
    260a:	ff 93       	push	r31
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	(*g_SETCALLBACKptr)();
    2614:	e0 91 72 07 	lds	r30, 0x0772
    2618:	f0 91 73 07 	lds	r31, 0x0773
    261c:	09 95       	icall
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	ff 91       	pop	r31
    2624:	ef 91       	pop	r30
    2626:	bf 91       	pop	r27
    2628:	af 91       	pop	r26
    262a:	9f 91       	pop	r25
    262c:	8f 91       	pop	r24
    262e:	7f 91       	pop	r23
    2630:	6f 91       	pop	r22
    2632:	5f 91       	pop	r21
    2634:	4f 91       	pop	r20
    2636:	3f 91       	pop	r19
    2638:	2f 91       	pop	r18
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    2640:	1f 90       	pop	r1
    2642:	18 95       	reti

00002644 <ICU_init>:


void ICU_init(const ICU_Config *Config_type)
{
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	00 d0       	rcall	.+0      	; 0x264a <ICU_init+0x6>
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	9a 83       	std	Y+2, r25	; 0x02
    2650:	89 83       	std	Y+1, r24	; 0x01
	/* To Use Timer1 without PWM Enable This Two Pins */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2652:	ef e4       	ldi	r30, 0x4F	; 79
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	8c e0       	ldi	r24, 0x0C	; 12
    2658:	80 83       	st	Z, r24
	/*ICU in AVR Pin Configuration @ PD6 */
	GPIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_INPUT);
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	66 e0       	ldi	r22, 0x06	; 6
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <GPIO_setupPinDirection>
	 * Argument of Function -> Is Pointer To Structure
	 * Structure Contain The Data Of Edge Needed From Data Sheet
	 * Also The Clock of timer1 According To Data Sheet
	 *
	 *  */
	TCCR1B=(TCCR1B&0XF8) | (Config_type->edge); /* First Initialization  For Needed Edge @ First */
    2664:	ae e4       	ldi	r26, 0x4E	; 78
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	ee e4       	ldi	r30, 0x4E	; 78
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	98 2f       	mov	r25, r24
    2670:	98 7f       	andi	r25, 0xF8	; 248
    2672:	e9 81       	ldd	r30, Y+1	; 0x01
    2674:	fa 81       	ldd	r31, Y+2	; 0x02
    2676:	81 81       	ldd	r24, Z+1	; 0x01
    2678:	89 2b       	or	r24, r25
    267a:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B&0XBF) | ((Config_type->clock)<<6); /* First Initialization  For Needed Clock @ First */
    267c:	ae e4       	ldi	r26, 0x4E	; 78
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	ee e4       	ldi	r30, 0x4E	; 78
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	28 2f       	mov	r18, r24
    2688:	2f 7b       	andi	r18, 0xBF	; 191
    268a:	e9 81       	ldd	r30, Y+1	; 0x01
    268c:	fa 81       	ldd	r31, Y+2	; 0x02
    268e:	80 81       	ld	r24, Z
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	00 24       	eor	r0, r0
    2696:	96 95       	lsr	r25
    2698:	87 95       	ror	r24
    269a:	07 94       	ror	r0
    269c:	96 95       	lsr	r25
    269e:	87 95       	ror	r24
    26a0:	07 94       	ror	r0
    26a2:	98 2f       	mov	r25, r24
    26a4:	80 2d       	mov	r24, r0
    26a6:	82 2b       	or	r24, r18
    26a8:	8c 93       	st	X, r24
	TCNT1=0; /* Initialize  The Register of Timer1 @ First by Zerog5 */
    26aa:	ec e4       	ldi	r30, 0x4C	; 76
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	11 82       	std	Z+1, r1	; 0x01
    26b0:	10 82       	st	Z, r1
	ICR1=0;
    26b2:	e6 e4       	ldi	r30, 0x46	; 70
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	11 82       	std	Z+1, r1	; 0x01
    26b8:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TICIE1);
    26ba:	a9 e5       	ldi	r26, 0x59	; 89
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e9 e5       	ldi	r30, 0x59	; 89
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	80 62       	ori	r24, 0x20	; 32
    26c6:	8c 93       	st	X, r24

}
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <ICU_DetectEdgeType>:
void ICU_DetectEdgeType(const ICU_EdgeConfig edge_type)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	0f 92       	push	r0
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B=(TCCR1B&0XBF) | ((edge_type)<<6);
    26de:	ae e4       	ldi	r26, 0x4E	; 78
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
    26e2:	ee e4       	ldi	r30, 0x4E	; 78
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	28 2f       	mov	r18, r24
    26ea:	2f 7b       	andi	r18, 0xBF	; 191
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	88 2f       	mov	r24, r24
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	00 24       	eor	r0, r0
    26f4:	96 95       	lsr	r25
    26f6:	87 95       	ror	r24
    26f8:	07 94       	ror	r0
    26fa:	96 95       	lsr	r25
    26fc:	87 95       	ror	r24
    26fe:	07 94       	ror	r0
    2700:	98 2f       	mov	r25, r24
    2702:	80 2d       	mov	r24, r0
    2704:	82 2b       	or	r24, r18
    2706:	8c 93       	st	X, r24
}
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <ICU_ClockDetectionType>:
void ICU_ClockDetectionType(const ICU_ClkConfig clk_type)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B=(TCCR1B&0XBF) | (clk_type);
    271c:	ae e4       	ldi	r26, 0x4E	; 78
    271e:	b0 e0       	ldi	r27, 0x00	; 0
    2720:	ee e4       	ldi	r30, 0x4E	; 78
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	98 2f       	mov	r25, r24
    2728:	9f 7b       	andi	r25, 0xBF	; 191
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	89 2b       	or	r24, r25
    272e:	8c 93       	st	X, r24
}
    2730:	0f 90       	pop	r0
    2732:	cf 91       	pop	r28
    2734:	df 91       	pop	r29
    2736:	08 95       	ret

00002738 <ICU_ClearTimerValue>:

void ICU_ClearTimerValue(void)
{
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2740:	ec e4       	ldi	r30, 0x4C	; 76
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	11 82       	std	Z+1, r1	; 0x01
    2746:	10 82       	st	Z, r1
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <ICU_ReturnInputCaptureValue>:
uint16 ICU_ReturnInputCaptureValue(void)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2756:	e6 e4       	ldi	r30, 0x46	; 70
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
}
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <SetCallBack>:

void SetCallBack(void(*ptr_Arg)(void))
{
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	00 d0       	rcall	.+0      	; 0x276a <SetCallBack+0x6>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	89 83       	std	Y+1, r24	; 0x01
	g_SETCALLBACKptr=ptr_Arg;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	9a 81       	ldd	r25, Y+2	; 0x02
    2776:	90 93 73 07 	sts	0x0773, r25
    277a:	80 93 72 07 	sts	0x0772, r24
}
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <De_Init>:
void De_Init(void)
{
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2790:	ec e4       	ldi	r30, 0x4C	; 76
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	11 82       	std	Z+1, r1	; 0x01
    2796:	10 82       	st	Z, r1
	ICR1=0;
    2798:	e6 e4       	ldi	r30, 0x46	; 70
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	11 82       	std	Z+1, r1	; 0x01
    279e:	10 82       	st	Z, r1
	TCCR1A=0;
    27a0:	ef e4       	ldi	r30, 0x4F	; 79
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	10 82       	st	Z, r1
	TCCR1B=0;
    27a6:	ee e4       	ldi	r30, 0x4E	; 78
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TICIE1);
    27ac:	a9 e5       	ldi	r26, 0x59	; 89
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e9 e5       	ldi	r30, 0x59	; 89
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	8f 7d       	andi	r24, 0xDF	; 223
    27b8:	8c 93       	st	X, r24

}
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <__udivmodhi4>:
    27c0:	aa 1b       	sub	r26, r26
    27c2:	bb 1b       	sub	r27, r27
    27c4:	51 e1       	ldi	r21, 0x11	; 17
    27c6:	07 c0       	rjmp	.+14     	; 0x27d6 <__udivmodhi4_ep>

000027c8 <__udivmodhi4_loop>:
    27c8:	aa 1f       	adc	r26, r26
    27ca:	bb 1f       	adc	r27, r27
    27cc:	a6 17       	cp	r26, r22
    27ce:	b7 07       	cpc	r27, r23
    27d0:	10 f0       	brcs	.+4      	; 0x27d6 <__udivmodhi4_ep>
    27d2:	a6 1b       	sub	r26, r22
    27d4:	b7 0b       	sbc	r27, r23

000027d6 <__udivmodhi4_ep>:
    27d6:	88 1f       	adc	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	5a 95       	dec	r21
    27dc:	a9 f7       	brne	.-22     	; 0x27c8 <__udivmodhi4_loop>
    27de:	80 95       	com	r24
    27e0:	90 95       	com	r25
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	08 95       	ret

000027e8 <__prologue_saves__>:
    27e8:	2f 92       	push	r2
    27ea:	3f 92       	push	r3
    27ec:	4f 92       	push	r4
    27ee:	5f 92       	push	r5
    27f0:	6f 92       	push	r6
    27f2:	7f 92       	push	r7
    27f4:	8f 92       	push	r8
    27f6:	9f 92       	push	r9
    27f8:	af 92       	push	r10
    27fa:	bf 92       	push	r11
    27fc:	cf 92       	push	r12
    27fe:	df 92       	push	r13
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	ca 1b       	sub	r28, r26
    2812:	db 0b       	sbc	r29, r27
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	09 94       	ijmp

00002820 <__epilogue_restores__>:
    2820:	2a 88       	ldd	r2, Y+18	; 0x12
    2822:	39 88       	ldd	r3, Y+17	; 0x11
    2824:	48 88       	ldd	r4, Y+16	; 0x10
    2826:	5f 84       	ldd	r5, Y+15	; 0x0f
    2828:	6e 84       	ldd	r6, Y+14	; 0x0e
    282a:	7d 84       	ldd	r7, Y+13	; 0x0d
    282c:	8c 84       	ldd	r8, Y+12	; 0x0c
    282e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2830:	aa 84       	ldd	r10, Y+10	; 0x0a
    2832:	b9 84       	ldd	r11, Y+9	; 0x09
    2834:	c8 84       	ldd	r12, Y+8	; 0x08
    2836:	df 80       	ldd	r13, Y+7	; 0x07
    2838:	ee 80       	ldd	r14, Y+6	; 0x06
    283a:	fd 80       	ldd	r15, Y+5	; 0x05
    283c:	0c 81       	ldd	r16, Y+4	; 0x04
    283e:	1b 81       	ldd	r17, Y+3	; 0x03
    2840:	aa 81       	ldd	r26, Y+2	; 0x02
    2842:	b9 81       	ldd	r27, Y+1	; 0x01
    2844:	ce 0f       	add	r28, r30
    2846:	d1 1d       	adc	r29, r1
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	ed 01       	movw	r28, r26
    2854:	08 95       	ret

00002856 <itoa>:
    2856:	fb 01       	movw	r30, r22
    2858:	9f 01       	movw	r18, r30
    285a:	e8 94       	clt
    285c:	42 30       	cpi	r20, 0x02	; 2
    285e:	c4 f0       	brlt	.+48     	; 0x2890 <itoa+0x3a>
    2860:	45 32       	cpi	r20, 0x25	; 37
    2862:	b4 f4       	brge	.+44     	; 0x2890 <itoa+0x3a>
    2864:	4a 30       	cpi	r20, 0x0A	; 10
    2866:	29 f4       	brne	.+10     	; 0x2872 <itoa+0x1c>
    2868:	97 fb       	bst	r25, 7
    286a:	1e f4       	brtc	.+6      	; 0x2872 <itoa+0x1c>
    286c:	90 95       	com	r25
    286e:	81 95       	neg	r24
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	64 2f       	mov	r22, r20
    2874:	77 27       	eor	r23, r23
    2876:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__udivmodhi4>
    287a:	80 5d       	subi	r24, 0xD0	; 208
    287c:	8a 33       	cpi	r24, 0x3A	; 58
    287e:	0c f0       	brlt	.+2      	; 0x2882 <itoa+0x2c>
    2880:	89 5d       	subi	r24, 0xD9	; 217
    2882:	81 93       	st	Z+, r24
    2884:	cb 01       	movw	r24, r22
    2886:	00 97       	sbiw	r24, 0x00	; 0
    2888:	a1 f7       	brne	.-24     	; 0x2872 <itoa+0x1c>
    288a:	16 f4       	brtc	.+4      	; 0x2890 <itoa+0x3a>
    288c:	5d e2       	ldi	r21, 0x2D	; 45
    288e:	51 93       	st	Z+, r21
    2890:	10 82       	st	Z, r1
    2892:	c9 01       	movw	r24, r18
    2894:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <strrev>

00002898 <strrev>:
    2898:	dc 01       	movw	r26, r24
    289a:	fc 01       	movw	r30, r24
    289c:	67 2f       	mov	r22, r23
    289e:	71 91       	ld	r23, Z+
    28a0:	77 23       	and	r23, r23
    28a2:	e1 f7       	brne	.-8      	; 0x289c <strrev+0x4>
    28a4:	32 97       	sbiw	r30, 0x02	; 2
    28a6:	04 c0       	rjmp	.+8      	; 0x28b0 <strrev+0x18>
    28a8:	7c 91       	ld	r23, X
    28aa:	6d 93       	st	X+, r22
    28ac:	70 83       	st	Z, r23
    28ae:	62 91       	ld	r22, -Z
    28b0:	ae 17       	cp	r26, r30
    28b2:	bf 07       	cpc	r27, r31
    28b4:	c8 f3       	brcs	.-14     	; 0x28a8 <strrev+0x10>
    28b6:	08 95       	ret

000028b8 <_exit>:
    28b8:	f8 94       	cli

000028ba <__stop_program>:
    28ba:	ff cf       	rjmp	.-2      	; 0x28ba <__stop_program>
